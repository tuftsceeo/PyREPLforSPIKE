{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst which = require('which');\n\nconst getPathKey = require('path-key');\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n  const env = parsed.options.env || process.env;\n  const cwd = process.cwd();\n  const hasCustomCwd = parsed.options.cwd != null; // Worker threads do not have process.chdir()\n\n  const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled; // If a custom `cwd` was specified, we need to change the process cwd\n  // because `which` will do stat calls but does not support a custom cwd\n\n  if (shouldSwitchCwd) {\n    try {\n      process.chdir(parsed.options.cwd);\n    } catch (err) {\n      /* Empty */\n    }\n  }\n\n  let resolved;\n\n  try {\n    resolved = which.sync(parsed.command, {\n      path: env[getPathKey({\n        env\n      })],\n      pathExt: withoutPathExt ? path.delimiter : undefined\n    });\n  } catch (e) {\n    /* Empty */\n  } finally {\n    if (shouldSwitchCwd) {\n      process.chdir(cwd);\n    }\n  } // If we successfully resolved, ensure that an absolute path is returned\n  // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n\n\n  if (resolved) {\n    resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n  }\n\n  return resolved;\n}\n\nfunction resolveCommand(parsed) {\n  return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;","map":{"version":3,"names":["path","require","which","getPathKey","resolveCommandAttempt","parsed","withoutPathExt","env","options","process","cwd","hasCustomCwd","shouldSwitchCwd","chdir","undefined","disabled","err","resolved","sync","command","pathExt","delimiter","e","resolve","resolveCommand","module","exports"],"sources":["C:/Users/gsess/node_modules/cross-spawn/lib/util/resolveCommand.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst getPathKey = require('path-key');\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;\n\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (shouldSwitchCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n            /* Empty */\n        }\n    }\n\n    let resolved;\n\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path.delimiter : undefined,\n        });\n    } catch (e) {\n        /* Empty */\n    } finally {\n        if (shouldSwitchCwd) {\n            process.chdir(cwd);\n        }\n    }\n\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n    }\n\n    return resolved;\n}\n\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,UAAD,CAA1B;;AAEA,SAASG,qBAAT,CAA+BC,MAA/B,EAAuCC,cAAvC,EAAuD;EACnD,MAAMC,GAAG,GAAGF,MAAM,CAACG,OAAP,CAAeD,GAAf,IAAsBE,OAAO,CAACF,GAA1C;EACA,MAAMG,GAAG,GAAGD,OAAO,CAACC,GAAR,EAAZ;EACA,MAAMC,YAAY,GAAGN,MAAM,CAACG,OAAP,CAAeE,GAAf,IAAsB,IAA3C,CAHmD,CAInD;;EACA,MAAME,eAAe,GAAGD,YAAY,IAAIF,OAAO,CAACI,KAAR,KAAkBC,SAAlC,IAA+C,CAACL,OAAO,CAACI,KAAR,CAAcE,QAAtF,CALmD,CAOnD;EACA;;EACA,IAAIH,eAAJ,EAAqB;IACjB,IAAI;MACAH,OAAO,CAACI,KAAR,CAAcR,MAAM,CAACG,OAAP,CAAeE,GAA7B;IACH,CAFD,CAEE,OAAOM,GAAP,EAAY;MACV;IACH;EACJ;;EAED,IAAIC,QAAJ;;EAEA,IAAI;IACAA,QAAQ,GAAGf,KAAK,CAACgB,IAAN,CAAWb,MAAM,CAACc,OAAlB,EAA2B;MAClCnB,IAAI,EAAEO,GAAG,CAACJ,UAAU,CAAC;QAAEI;MAAF,CAAD,CAAX,CADyB;MAElCa,OAAO,EAAEd,cAAc,GAAGN,IAAI,CAACqB,SAAR,GAAoBP;IAFT,CAA3B,CAAX;EAIH,CALD,CAKE,OAAOQ,CAAP,EAAU;IACR;EACH,CAPD,SAOU;IACN,IAAIV,eAAJ,EAAqB;MACjBH,OAAO,CAACI,KAAR,CAAcH,GAAd;IACH;EACJ,CA9BkD,CAgCnD;EACA;;;EACA,IAAIO,QAAJ,EAAc;IACVA,QAAQ,GAAGjB,IAAI,CAACuB,OAAL,CAAaZ,YAAY,GAAGN,MAAM,CAACG,OAAP,CAAeE,GAAlB,GAAwB,EAAjD,EAAqDO,QAArD,CAAX;EACH;;EAED,OAAOA,QAAP;AACH;;AAED,SAASO,cAAT,CAAwBnB,MAAxB,EAAgC;EAC5B,OAAOD,qBAAqB,CAACC,MAAD,CAArB,IAAiCD,qBAAqB,CAACC,MAAD,EAAS,IAAT,CAA7D;AACH;;AAEDoB,MAAM,CAACC,OAAP,GAAiBF,cAAjB"},"metadata":{},"sourceType":"script"}