{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gsess\\\\Documents\\\\React\\\\repl\\\\src\\\\components\\\\Serial\\\\Serial.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SerialButton from \"./SerialButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Serial() {\n  _s();\n\n  let port = null;\n  const CONTROL_C = '\\x03'; // CTRL-C character (ETX character)\n\n  const CONTROL_D = '\\x04'; // CTRL-D character (EOT character)\n\n  /*\r\n      InitWebSerial\r\n      - Initializes a Web Serial Port and returns the initialized port\r\n      - Returns the port if successful, null otherwise\r\n  */\n\n  async function initWebSerial() {\n    port = await navigator.serial.getPorts();\n    port = await navigator.serial.requestPort({// filters:[filter]\n    }); // wait for the port to open.\n\n    try {\n      await port.open({\n        baudRate: 115200\n      });\n    } catch (er) {\n      console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er); //await port.close();\n    }\n\n    if (port.readable) {\n      serialButtonConnected();\n      return true;\n    } else {\n      return false;\n    }\n  } // Reads Data from the SPIKE Prime (Uint8Array Format)\n\n\n  async function readPort() {\n    // eslint-disable-next-line no-undef\n    let decoder = new TextDecoderStream();\n    let inputDone = port.readable.pipeTo(decoder.writable);\n    const inputStream = decoder.readable;\n    const reader = inputStream.getReader();\n\n    while (port.readable) {\n      //const reader = port.readable.getReader();\n      try {\n        while (true) {\n          const {\n            value,\n            done\n          } = await reader.read();\n\n          if (done) {\n            // |reader| has been canceled.\n            break;\n          }\n\n          console.log(value);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        reader.releaseLock();\n      }\n    }\n  } // Writes a string (or array of strings) to the SPIKE terminal\n\n\n  async function writeToPort(lines) {\n    // eslint-disable-next-line no-undef\n    const textEncoder = new TextEncoderStream();\n    const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\n    const writer = textEncoder.writable.getWriter();\n    if (typeof lines === \"string\") await writer.write(lines);else if (typeof lines === \"object\") {\n      lines.forEach(async element => {\n        console.log(element);\n        await writer.write(element);\n      });\n    } else {\n      console.error(\"Invalid data type: Use Array or String\");\n    } //writer.releaseLock();\n  } // Writes and reads code to/from serial port\n\n\n  async function startWebSerial() {\n    if (await initWebSerial()) {\n      //await writeToPort(CONTROL_C)\n      //await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\n      readPort();\n      await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"]);\n    }\n  } // Serial Port UI Component Hooks\n\n\n  const [connectText, setConnectText] = useState(\"Connect SPIKE Here: \");\n  const [buttonColor, setButtonColor] = useState(\"warning\");\n  const [buttonOnClick, setButtonOnClick] = useState(startWebSerial); // Changes functionality of serial port button once serial port is connected\n\n  function serialButtonConnected() {\n    setConnectText(\"SPIKE Connected\");\n    setButtonColor(\"success\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(SerialButton, {\n      buttonColor: buttonColor,\n      connectText: connectText,\n      onClick: buttonOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Serial, \"kCto+wbAuOlXYY52HuvpnpZ1Zxo=\");\n\n_c = Serial;\nexport default Serial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Serial\");","map":{"version":3,"names":["React","useState","SerialButton","Serial","port","CONTROL_C","CONTROL_D","initWebSerial","navigator","serial","getPorts","requestPort","open","baudRate","er","console","log","readable","serialButtonConnected","readPort","decoder","TextDecoderStream","inputDone","pipeTo","writable","inputStream","reader","getReader","value","done","read","error","releaseLock","writeToPort","lines","textEncoder","TextEncoderStream","writableStreamClosed","writer","getWriter","write","forEach","element","startWebSerial","connectText","setConnectText","buttonColor","setButtonColor","buttonOnClick","setButtonOnClick"],"sources":["C:/Users/gsess/Documents/React/repl/src/components/Serial/Serial.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport SerialButton from \"./SerialButton\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Serial() {\r\n\r\n    let port = null;\r\n\r\n    const CONTROL_C = '\\x03'; // CTRL-C character (ETX character)\r\n    const CONTROL_D = '\\x04'; // CTRL-D character (EOT character)\r\n\r\n    /*\r\n        InitWebSerial\r\n        - Initializes a Web Serial Port and returns the initialized port\r\n        - Returns the port if successful, null otherwise\r\n    */\r\n    async function initWebSerial() {\r\n        port = await navigator.serial.getPorts();\r\n\r\n        port = await navigator.serial.requestPort({\r\n            // filters:[filter]\r\n        });\r\n\r\n        // wait for the port to open.\r\n        try {\r\n            await port.open({ baudRate: 115200 });\r\n        }\r\n        catch (er) {\r\n            console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er);\r\n            //await port.close();\r\n        }\r\n\r\n        if (port.readable) {\r\n            serialButtonConnected();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Reads Data from the SPIKE Prime (Uint8Array Format)\r\n    async function readPort() {\r\n        // eslint-disable-next-line no-undef\r\n        let decoder = new TextDecoderStream();\r\n        let inputDone = port.readable.pipeTo(decoder.writable);\r\n        const inputStream = decoder.readable;\r\n\r\n        const reader = inputStream.getReader();\r\n        while (port.readable) {\r\n            //const reader = port.readable.getReader();\r\n            try {\r\n                while (true) {\r\n                const { value, done } = await reader.read();\r\n                if (done) {\r\n                    // |reader| has been canceled.\r\n                    break;\r\n                }\r\n                console.log(value);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            } finally {\r\n                reader.releaseLock();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Writes a string (or array of strings) to the SPIKE terminal\r\n    async function writeToPort(lines) {\r\n        // eslint-disable-next-line no-undef\r\n        const textEncoder = new TextEncoderStream();\r\n        const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\r\n\r\n        const writer = textEncoder.writable.getWriter();\r\n\r\n        if (typeof(lines) === \"string\")\r\n            await writer.write(lines);\r\n        else if(typeof(lines) === \"object\") {\r\n            lines.forEach(async (element) => {\r\n                console.log(element)\r\n                await writer.write(element);\r\n            });\r\n        }\r\n        else {\r\n            console.error(\"Invalid data type: Use Array or String\")\r\n        }\r\n        \r\n\r\n        //writer.releaseLock();\r\n        \r\n    }\r\n\r\n    // Writes and reads code to/from serial port\r\n    async function startWebSerial() {\r\n        if (await initWebSerial()) {\r\n            //await writeToPort(CONTROL_C)\r\n            //await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\r\n            \r\n            readPort()\r\n            await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\r\n        }\r\n\r\n    }\r\n\r\n\r\n    \r\n    // Serial Port UI Component Hooks\r\n    const [connectText, setConnectText] = useState(\"Connect SPIKE Here: \");\r\n    const [buttonColor, setButtonColor] = useState(\"warning\");\r\n    const [buttonOnClick, setButtonOnClick] = useState(startWebSerial);\r\n\r\n    // Changes functionality of serial port button once serial port is connected\r\n    function serialButtonConnected() {\r\n        setConnectText(\"SPIKE Connected\")\r\n        setButtonColor(\"success\");\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"flex justify-center\">\r\n            \r\n            <SerialButton buttonColor={buttonColor} connectText={connectText} onClick={buttonOnClick} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Serial;"],"mappings":"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"},"metadata":{},"sourceType":"module"}