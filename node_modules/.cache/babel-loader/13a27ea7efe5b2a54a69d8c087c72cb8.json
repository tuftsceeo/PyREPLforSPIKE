{"ast":null,"code":"// A passthrough read/write stream that sets its properties\n// based on a header, extendedHeader, and globalHeader\n//\n// Can be either a file system object of some sort, or\n// a pax/ustar metadata entry.\nmodule.exports = Entry;\n\nvar TarHeader = require(\"./header.js\"),\n    tar = require(\"../tar\"),\n    assert = require(\"assert\").ok,\n    Stream = require(\"stream\").Stream,\n    inherits = require(\"inherits\"),\n    fstream = require(\"fstream\").Abstract;\n\nfunction Entry(header, extended, global) {\n  Stream.call(this);\n  this.readable = true;\n  this.writable = true;\n  this._needDrain = false;\n  this._paused = false;\n  this._reading = false;\n  this._ending = false;\n  this._ended = false;\n  this._remaining = 0;\n  this._abort = false;\n  this._queue = [];\n  this._index = 0;\n  this._queueLen = 0;\n  this._read = this._read.bind(this);\n  this.props = {};\n  this._header = header;\n  this._extended = extended || {}; // globals can change throughout the course of\n  // a file parse operation.  Freeze it at its current state.\n\n  this._global = {};\n  var me = this;\n  Object.keys(global || {}).forEach(function (g) {\n    me._global[g] = global[g];\n  });\n\n  this._setProps();\n}\n\ninherits(Entry, Stream);\n\nEntry.prototype.write = function (c) {\n  if (this._ending) this.error(\"write() after end()\", null, true);\n\n  if (this._remaining === 0) {\n    this.error(\"invalid bytes past eof\");\n  } // often we'll get a bunch of \\0 at the end of the last write,\n  // since chunks will always be 512 bytes when reading a tarball.\n\n\n  if (c.length > this._remaining) {\n    c = c.slice(0, this._remaining);\n  }\n\n  this._remaining -= c.length; // put it on the stack.\n\n  var ql = this._queueLen;\n\n  this._queue.push(c);\n\n  this._queueLen++;\n\n  this._read(); // either paused, or buffered\n\n\n  if (this._paused || ql > 0) {\n    this._needDrain = true;\n    return false;\n  }\n\n  return true;\n};\n\nEntry.prototype.end = function (c) {\n  if (c) this.write(c);\n  this._ending = true;\n\n  this._read();\n};\n\nEntry.prototype.pause = function () {\n  this._paused = true;\n  this.emit(\"pause\");\n};\n\nEntry.prototype.resume = function () {\n  // console.error(\"    Tar Entry resume\", this.path)\n  this.emit(\"resume\");\n  this._paused = false;\n\n  this._read();\n\n  return this._queueLen - this._index > 1;\n}; // This is bound to the instance\n\n\nEntry.prototype._read = function () {\n  // console.error(\"    Tar Entry _read\", this.path)\n  if (this._paused || this._reading || this._ended) return; // set this flag so that event handlers don't inadvertently\n  // get multiple _read() calls running.\n\n  this._reading = true; // have any data to emit?\n\n  while (this._index < this._queueLen && !this._paused) {\n    var chunk = this._queue[this._index++];\n    this.emit(\"data\", chunk);\n  } // check if we're drained\n\n\n  if (this._index >= this._queueLen) {\n    this._queue.length = this._queueLen = this._index = 0;\n\n    if (this._needDrain) {\n      this._needDrain = false;\n      this.emit(\"drain\");\n    }\n\n    if (this._ending) {\n      this._ended = true;\n      this.emit(\"end\");\n    }\n  } // if the queue gets too big, then pluck off whatever we can.\n  // this should be fairly rare.\n\n\n  var mql = this._maxQueueLen;\n\n  if (this._queueLen > mql && this._index > 0) {\n    mql = Math.min(this._index, mql);\n    this._index -= mql;\n    this._queueLen -= mql;\n    this._queue = this._queue.slice(mql);\n  }\n\n  this._reading = false;\n};\n\nEntry.prototype._setProps = function () {\n  // props = extended->global->header->{}\n  var header = this._header,\n      extended = this._extended,\n      global = this._global,\n      props = this.props; // first get the values from the normal header.\n\n  var fields = tar.fields;\n\n  for (var f = 0; fields[f] !== null; f++) {\n    var field = fields[f],\n        val = header[field];\n    if (typeof val !== \"undefined\") props[field] = val;\n  } // next, the global header for this file.\n  // numeric values, etc, will have already been parsed.\n\n\n  ;\n  [global, extended].forEach(function (p) {\n    Object.keys(p).forEach(function (f) {\n      if (typeof p[f] !== \"undefined\") props[f] = p[f];\n    });\n  }) // no nulls allowed in path or linkpath\n  ;\n  [\"path\", \"linkpath\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = props[p].split(\"\\0\")[0];\n    }\n  }) // set date fields to be a proper date\n  ;\n  [\"mtime\", \"ctime\", \"atime\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = new Date(props[p] * 1000);\n    }\n  }); // set the type so that we know what kind of file to create\n\n  var type;\n\n  switch (tar.types[props.type]) {\n    case \"OldFile\":\n    case \"ContiguousFile\":\n      type = \"File\";\n      break;\n\n    case \"GNUDumpDir\":\n      type = \"Directory\";\n      break;\n\n    case undefined:\n      type = \"Unknown\";\n      break;\n\n    case \"Link\":\n    case \"SymbolicLink\":\n    case \"CharacterDevice\":\n    case \"BlockDevice\":\n    case \"Directory\":\n    case \"FIFO\":\n    default:\n      type = tar.types[props.type];\n  }\n\n  this.type = type;\n  this.path = props.path;\n  this.size = props.size; // size is special, since it signals when the file needs to end.\n\n  this._remaining = props.size;\n}; // the parser may not call write if _abort is true. \n// useful for skipping data from some files quickly.\n\n\nEntry.prototype.abort = function () {\n  this._abort = true;\n};\n\nEntry.prototype.warn = fstream.warn;\nEntry.prototype.error = fstream.error;","map":{"version":3,"names":["module","exports","Entry","TarHeader","require","tar","assert","ok","Stream","inherits","fstream","Abstract","header","extended","global","call","readable","writable","_needDrain","_paused","_reading","_ending","_ended","_remaining","_abort","_queue","_index","_queueLen","_read","bind","props","_header","_extended","_global","me","Object","keys","forEach","g","_setProps","prototype","write","c","error","length","slice","ql","push","end","pause","emit","resume","chunk","mql","_maxQueueLen","Math","min","fields","f","field","val","p","hasOwnProperty","split","Date","type","types","undefined","path","size","abort","warn"],"sources":["C:/Users/gsess/node_modules/tar/lib/entry.js"],"sourcesContent":["// A passthrough read/write stream that sets its properties\n// based on a header, extendedHeader, and globalHeader\n//\n// Can be either a file system object of some sort, or\n// a pax/ustar metadata entry.\n\nmodule.exports = Entry\n\nvar TarHeader = require(\"./header.js\")\n  , tar = require(\"../tar\")\n  , assert = require(\"assert\").ok\n  , Stream = require(\"stream\").Stream\n  , inherits = require(\"inherits\")\n  , fstream = require(\"fstream\").Abstract\n\nfunction Entry (header, extended, global) {\n  Stream.call(this)\n  this.readable = true\n  this.writable = true\n\n  this._needDrain = false\n  this._paused = false\n  this._reading = false\n  this._ending = false\n  this._ended = false\n  this._remaining = 0\n  this._abort = false\n  this._queue = []\n  this._index = 0\n  this._queueLen = 0\n\n  this._read = this._read.bind(this)\n\n  this.props = {}\n  this._header = header\n  this._extended = extended || {}\n\n  // globals can change throughout the course of\n  // a file parse operation.  Freeze it at its current state.\n  this._global = {}\n  var me = this\n  Object.keys(global || {}).forEach(function (g) {\n    me._global[g] = global[g]\n  })\n\n  this._setProps()\n}\n\ninherits(Entry, Stream)\n\nEntry.prototype.write = function (c) {\n  if (this._ending) this.error(\"write() after end()\", null, true)\n  if (this._remaining === 0) {\n    this.error(\"invalid bytes past eof\")\n  }\n\n  // often we'll get a bunch of \\0 at the end of the last write,\n  // since chunks will always be 512 bytes when reading a tarball.\n  if (c.length > this._remaining) {\n    c = c.slice(0, this._remaining)\n  }\n  this._remaining -= c.length\n\n  // put it on the stack.\n  var ql = this._queueLen\n  this._queue.push(c)\n  this._queueLen ++\n\n  this._read()\n\n  // either paused, or buffered\n  if (this._paused || ql > 0) {\n    this._needDrain = true\n    return false\n  }\n\n  return true\n}\n\nEntry.prototype.end = function (c) {\n  if (c) this.write(c)\n  this._ending = true\n  this._read()\n}\n\nEntry.prototype.pause = function () {\n  this._paused = true\n  this.emit(\"pause\")\n}\n\nEntry.prototype.resume = function () {\n  // console.error(\"    Tar Entry resume\", this.path)\n  this.emit(\"resume\")\n  this._paused = false\n  this._read()\n  return this._queueLen - this._index > 1\n}\n\n  // This is bound to the instance\nEntry.prototype._read = function () {\n  // console.error(\"    Tar Entry _read\", this.path)\n\n  if (this._paused || this._reading || this._ended) return\n\n  // set this flag so that event handlers don't inadvertently\n  // get multiple _read() calls running.\n  this._reading = true\n\n  // have any data to emit?\n  while (this._index < this._queueLen && !this._paused) {\n    var chunk = this._queue[this._index ++]\n    this.emit(\"data\", chunk)\n  }\n\n  // check if we're drained\n  if (this._index >= this._queueLen) {\n    this._queue.length = this._queueLen = this._index = 0\n    if (this._needDrain) {\n      this._needDrain = false\n      this.emit(\"drain\")\n    }\n    if (this._ending) {\n      this._ended = true\n      this.emit(\"end\")\n    }\n  }\n\n  // if the queue gets too big, then pluck off whatever we can.\n  // this should be fairly rare.\n  var mql = this._maxQueueLen\n  if (this._queueLen > mql && this._index > 0) {\n    mql = Math.min(this._index, mql)\n    this._index -= mql\n    this._queueLen -= mql\n    this._queue = this._queue.slice(mql)\n  }\n\n  this._reading = false\n}\n\nEntry.prototype._setProps = function () {\n  // props = extended->global->header->{}\n  var header = this._header\n    , extended = this._extended\n    , global = this._global\n    , props = this.props\n\n  // first get the values from the normal header.\n  var fields = tar.fields\n  for (var f = 0; fields[f] !== null; f ++) {\n    var field = fields[f]\n      , val = header[field]\n    if (typeof val !== \"undefined\") props[field] = val\n  }\n\n  // next, the global header for this file.\n  // numeric values, etc, will have already been parsed.\n  ;[global, extended].forEach(function (p) {\n    Object.keys(p).forEach(function (f) {\n      if (typeof p[f] !== \"undefined\") props[f] = p[f]\n    })\n  })\n\n  // no nulls allowed in path or linkpath\n  ;[\"path\", \"linkpath\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = props[p].split(\"\\0\")[0]\n    }\n  })\n\n\n  // set date fields to be a proper date\n  ;[\"mtime\", \"ctime\", \"atime\"].forEach(function (p) {\n    if (props.hasOwnProperty(p)) {\n      props[p] = new Date(props[p] * 1000)\n    }\n  })\n\n  // set the type so that we know what kind of file to create\n  var type\n  switch (tar.types[props.type]) {\n    case \"OldFile\":\n    case \"ContiguousFile\":\n      type = \"File\"\n      break\n\n    case \"GNUDumpDir\":\n      type = \"Directory\"\n      break\n\n    case undefined:\n      type = \"Unknown\"\n      break\n\n    case \"Link\":\n    case \"SymbolicLink\":\n    case \"CharacterDevice\":\n    case \"BlockDevice\":\n    case \"Directory\":\n    case \"FIFO\":\n    default:\n      type = tar.types[props.type]\n  }\n\n  this.type = type\n  this.path = props.path\n  this.size = props.size\n\n  // size is special, since it signals when the file needs to end.\n  this._remaining = props.size\n}\n\n// the parser may not call write if _abort is true. \n// useful for skipping data from some files quickly.\nEntry.prototype.abort = function(){\n  this._abort = true\n}\n\nEntry.prototype.warn = fstream.warn\nEntry.prototype.error = fstream.error\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}