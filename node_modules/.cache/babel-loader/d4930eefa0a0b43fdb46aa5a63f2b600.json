{"ast":null,"code":"// field paths that every tar file must have.\n// header is padded to 512 bytes.\nvar f = 0,\n    fields = {},\n    path = fields.path = f++,\n    mode = fields.mode = f++,\n    uid = fields.uid = f++,\n    gid = fields.gid = f++,\n    size = fields.size = f++,\n    mtime = fields.mtime = f++,\n    cksum = fields.cksum = f++,\n    type = fields.type = f++,\n    linkpath = fields.linkpath = f++,\n    headerSize = 512,\n    blockSize = 512,\n    fieldSize = [];\nfieldSize[path] = 100;\nfieldSize[mode] = 8;\nfieldSize[uid] = 8;\nfieldSize[gid] = 8;\nfieldSize[size] = 12;\nfieldSize[mtime] = 12;\nfieldSize[cksum] = 8;\nfieldSize[type] = 1;\nfieldSize[linkpath] = 100; // \"ustar\\0\" may introduce another bunch of headers.\n// these are optional, and will be nulled out if not present.\n\nvar ustar = fields.ustar = f++,\n    ustarver = fields.ustarver = f++,\n    uname = fields.uname = f++,\n    gname = fields.gname = f++,\n    devmaj = fields.devmaj = f++,\n    devmin = fields.devmin = f++,\n    prefix = fields.prefix = f++,\n    fill = fields.fill = f++; // terminate fields.\n\nfields[f] = null;\nfieldSize[ustar] = 6;\nfieldSize[ustarver] = 2;\nfieldSize[uname] = 32;\nfieldSize[gname] = 32;\nfieldSize[devmaj] = 8;\nfieldSize[devmin] = 8;\nfieldSize[prefix] = 155;\nfieldSize[fill] = 12; // nb: prefix field may in fact be 130 bytes of prefix,\n// a null char, 12 bytes for atime, 12 bytes for ctime.\n//\n// To recognize this format:\n// 1. prefix[130] === ' ' or '\\0'\n// 2. atime and ctime are octal numeric values\n// 3. atime and ctime have ' ' in their last byte\n\nvar fieldEnds = {},\n    fieldOffs = {},\n    fe = 0;\n\nfor (var i = 0; i < f; i++) {\n  fieldOffs[i] = fe;\n  fieldEnds[i] = fe += fieldSize[i];\n} // build a translation table of field paths.\n\n\nObject.keys(fields).forEach(function (f) {\n  if (fields[f] !== null) fields[fields[f]] = f;\n}); // different values of the 'type' field\n// paths match the values of Stats.isX() functions, where appropriate\n\nvar types = {\n  0: \"File\",\n  \"\\0\": \"OldFile\" // like 0\n  ,\n  \"\": \"OldFile\",\n  1: \"Link\",\n  2: \"SymbolicLink\",\n  3: \"CharacterDevice\",\n  4: \"BlockDevice\",\n  5: \"Directory\",\n  6: \"FIFO\",\n  7: \"ContiguousFile\" // like 0\n  // posix headers\n  ,\n  g: \"GlobalExtendedHeader\" // k=v for the rest of the archive\n  ,\n  x: \"ExtendedHeader\" // k=v for the next file\n  // vendor-specific stuff\n  ,\n  A: \"SolarisACL\" // skip\n  ,\n  D: \"GNUDumpDir\" // like 5, but with data, which should be skipped\n  ,\n  I: \"Inode\" // metadata only, skip\n  ,\n  K: \"NextFileHasLongLinkpath\" // data = link path of next file\n  ,\n  L: \"NextFileHasLongPath\" // data = path of next file\n  ,\n  M: \"ContinuationFile\" // skip\n  ,\n  N: \"OldGnuLongPath\" // like L\n  ,\n  S: \"SparseFile\" // skip\n  ,\n  V: \"TapeVolumeHeader\" // skip\n  ,\n  X: \"OldExtendedHeader\" // like x\n\n};\nObject.keys(types).forEach(function (t) {\n  types[types[t]] = types[types[t]] || t;\n}); // values for the mode field\n\nvar modes = {\n  suid: 04000 // set uid on extraction\n  ,\n  sgid: 02000 // set gid on extraction\n  ,\n  svtx: 01000 // set restricted deletion flag on dirs on extraction\n  ,\n  uread: 0400,\n  uwrite: 0200,\n  uexec: 0100,\n  gread: 040,\n  gwrite: 020,\n  gexec: 010,\n  oread: 4,\n  owrite: 2,\n  oexec: 1,\n  all: 07777\n};\nvar numeric = {\n  mode: true,\n  uid: true,\n  gid: true,\n  size: true,\n  mtime: true,\n  devmaj: true,\n  devmin: true,\n  cksum: true,\n  atime: true,\n  ctime: true,\n  dev: true,\n  ino: true,\n  nlink: true\n};\nObject.keys(modes).forEach(function (t) {\n  modes[modes[t]] = modes[modes[t]] || t;\n});\nvar knownExtended = {\n  atime: true,\n  charset: true,\n  comment: true,\n  ctime: true,\n  gid: true,\n  gname: true,\n  linkpath: true,\n  mtime: true,\n  path: true,\n  realtime: true,\n  security: true,\n  size: true,\n  uid: true,\n  uname: true\n};\nexports.fields = fields;\nexports.fieldSize = fieldSize;\nexports.fieldOffs = fieldOffs;\nexports.fieldEnds = fieldEnds;\nexports.types = types;\nexports.modes = modes;\nexports.numeric = numeric;\nexports.headerSize = headerSize;\nexports.blockSize = blockSize;\nexports.knownExtended = knownExtended;\nexports.Pack = require(\"./lib/pack.js\");\nexports.Parse = require(\"./lib/parse.js\");\nexports.Extract = require(\"./lib/extract.js\");","map":{"version":3,"names":["f","fields","path","mode","uid","gid","size","mtime","cksum","type","linkpath","headerSize","blockSize","fieldSize","ustar","ustarver","uname","gname","devmaj","devmin","prefix","fill","fieldEnds","fieldOffs","fe","i","Object","keys","forEach","types","g","x","A","D","I","K","L","M","N","S","V","X","t","modes","suid","sgid","svtx","uread","uwrite","uexec","gread","gwrite","gexec","oread","owrite","oexec","all","numeric","atime","ctime","dev","ino","nlink","knownExtended","charset","comment","realtime","security","exports","Pack","require","Parse","Extract"],"sources":["C:/Users/gsess/node_modules/tar/tar.js"],"sourcesContent":["// field paths that every tar file must have.\n// header is padded to 512 bytes.\nvar f = 0\n  , fields = {}\n  , path = fields.path = f++\n  , mode = fields.mode = f++\n  , uid = fields.uid = f++\n  , gid = fields.gid = f++\n  , size = fields.size = f++\n  , mtime = fields.mtime = f++\n  , cksum = fields.cksum = f++\n  , type = fields.type = f++\n  , linkpath = fields.linkpath = f++\n  , headerSize = 512\n  , blockSize = 512\n  , fieldSize = []\n\nfieldSize[path] = 100\nfieldSize[mode] = 8\nfieldSize[uid] = 8\nfieldSize[gid] = 8\nfieldSize[size] = 12\nfieldSize[mtime] = 12\nfieldSize[cksum] = 8\nfieldSize[type] = 1\nfieldSize[linkpath] = 100\n\n// \"ustar\\0\" may introduce another bunch of headers.\n// these are optional, and will be nulled out if not present.\n\nvar ustar = fields.ustar = f++\n  , ustarver = fields.ustarver = f++\n  , uname = fields.uname = f++\n  , gname = fields.gname = f++\n  , devmaj = fields.devmaj = f++\n  , devmin = fields.devmin = f++\n  , prefix = fields.prefix = f++\n  , fill = fields.fill = f++\n\n// terminate fields.\nfields[f] = null\n\nfieldSize[ustar] = 6\nfieldSize[ustarver] = 2\nfieldSize[uname] = 32\nfieldSize[gname] = 32\nfieldSize[devmaj] = 8\nfieldSize[devmin] = 8\nfieldSize[prefix] = 155\nfieldSize[fill] = 12\n\n// nb: prefix field may in fact be 130 bytes of prefix,\n// a null char, 12 bytes for atime, 12 bytes for ctime.\n//\n// To recognize this format:\n// 1. prefix[130] === ' ' or '\\0'\n// 2. atime and ctime are octal numeric values\n// 3. atime and ctime have ' ' in their last byte\n\nvar fieldEnds = {}\n  , fieldOffs = {}\n  , fe = 0\nfor (var i = 0; i < f; i ++) {\n  fieldOffs[i] = fe\n  fieldEnds[i] = (fe += fieldSize[i])\n}\n\n// build a translation table of field paths.\nObject.keys(fields).forEach(function (f) {\n  if (fields[f] !== null) fields[fields[f]] = f\n})\n\n// different values of the 'type' field\n// paths match the values of Stats.isX() functions, where appropriate\nvar types =\n  { 0: \"File\"\n  , \"\\0\": \"OldFile\" // like 0\n  , \"\": \"OldFile\"\n  , 1: \"Link\"\n  , 2: \"SymbolicLink\"\n  , 3: \"CharacterDevice\"\n  , 4: \"BlockDevice\"\n  , 5: \"Directory\"\n  , 6: \"FIFO\"\n  , 7: \"ContiguousFile\" // like 0\n  // posix headers\n  , g: \"GlobalExtendedHeader\" // k=v for the rest of the archive\n  , x: \"ExtendedHeader\" // k=v for the next file\n  // vendor-specific stuff\n  , A: \"SolarisACL\" // skip\n  , D: \"GNUDumpDir\" // like 5, but with data, which should be skipped\n  , I: \"Inode\" // metadata only, skip\n  , K: \"NextFileHasLongLinkpath\" // data = link path of next file\n  , L: \"NextFileHasLongPath\" // data = path of next file\n  , M: \"ContinuationFile\" // skip\n  , N: \"OldGnuLongPath\" // like L\n  , S: \"SparseFile\" // skip\n  , V: \"TapeVolumeHeader\" // skip\n  , X: \"OldExtendedHeader\" // like x\n  }\n\nObject.keys(types).forEach(function (t) {\n  types[types[t]] = types[types[t]] || t\n})\n\n// values for the mode field\nvar modes =\n  { suid: 04000 // set uid on extraction\n  , sgid: 02000 // set gid on extraction\n  , svtx: 01000 // set restricted deletion flag on dirs on extraction\n  , uread:  0400\n  , uwrite: 0200\n  , uexec:  0100\n  , gread:  040\n  , gwrite: 020\n  , gexec:  010\n  , oread:  4\n  , owrite: 2\n  , oexec:  1\n  , all: 07777\n  }\n\nvar numeric =\n  { mode: true\n  , uid: true\n  , gid: true\n  , size: true\n  , mtime: true\n  , devmaj: true\n  , devmin: true\n  , cksum: true\n  , atime: true\n  , ctime: true\n  , dev: true\n  , ino: true\n  , nlink: true\n  }\n\nObject.keys(modes).forEach(function (t) {\n  modes[modes[t]] = modes[modes[t]] || t\n})\n\nvar knownExtended =\n  { atime: true\n  , charset: true\n  , comment: true\n  , ctime: true\n  , gid: true\n  , gname: true\n  , linkpath: true\n  , mtime: true\n  , path: true\n  , realtime: true\n  , security: true\n  , size: true\n  , uid: true\n  , uname: true }\n\n\nexports.fields = fields\nexports.fieldSize = fieldSize\nexports.fieldOffs = fieldOffs\nexports.fieldEnds = fieldEnds\nexports.types = types\nexports.modes = modes\nexports.numeric = numeric\nexports.headerSize = headerSize\nexports.blockSize = blockSize\nexports.knownExtended = knownExtended\n\nexports.Pack = require(\"./lib/pack.js\")\nexports.Parse = require(\"./lib/parse.js\")\nexports.Extract = require(\"./lib/extract.js\")\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}