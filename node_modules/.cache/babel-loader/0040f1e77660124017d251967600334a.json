{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/gsess/Documents/React/repl/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _slicedToArray from\"C:/Users/gsess/Documents/React/repl/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _asyncToGenerator from\"C:/Users/gsess/Documents/React/repl/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React,{useState}from\"react\";import SerialButton from\"./SerialButton\";import{jsx as _jsx}from\"react/jsx-runtime\";function Serial(props){var port=null;var CONTROL_C='\\x03';// CTRL-C character \nvar CONTROL_D='\\x04';// CTRL-D character\nvar ENTER='\\r\\n';// NEWLINE character\n/*\r\n        InitWebSerial\r\n        - Initializes a Web Serial Port and returns the initialized port\r\n        - Returns the port if successful, null otherwise\r\n    */function initWebSerial(){return _initWebSerial.apply(this,arguments);}// Reads Data from the SPIKE Prime (Uint8Array Format)\nfunction _initWebSerial(){_initWebSerial=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return navigator.serial.getPorts();case 2:port=_context.sent;_context.next=5;return navigator.serial.requestPort({// filters:[filter]\n});case 5:port=_context.sent;_context.prev=6;_context.next=9;return port.open({baudRate:115200});case 9:_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](6);console.log(\"%cTuftsCEEO \",\"color: #3ba336;\",_context.t0);//await port.close();\ncase 14:if(!port.readable){_context.next=18;break;}return _context.abrupt(\"return\",true);case 18:return _context.abrupt(\"return\",false);case 19:case\"end\":return _context.stop();}}},_callee,null,[[6,11]]);}));return _initWebSerial.apply(this,arguments);}function readPort(){return _readPort.apply(this,arguments);}// Writes a string (or array of strings) to the SPIKE terminal\nfunction _readPort(){_readPort=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var decoder,inputDone,inputStream,reader,_yield$reader$read,value,done;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// eslint-disable-next-line no-undef\ndecoder=new TextDecoderStream();inputDone=port.readable.pipeTo(decoder.writable);inputStream=decoder.readable;reader=inputStream.getReader();case 4:if(!port.readable){_context2.next=28;break;}_context2.prev=5;case 6:if(!true){_context2.next=18;break;}_context2.next=9;return reader.read();case 9:_yield$reader$read=_context2.sent;value=_yield$reader$read.value;done=_yield$reader$read.done;if(!done){_context2.next=14;break;}return _context2.abrupt(\"break\",18);case 14:props.exportConsole(value);console.log(value);_context2.next=6;break;case 18:_context2.next=23;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](5);console.error(_context2.t0);case 23:_context2.prev=23;reader.releaseLock();return _context2.finish(23);case 26:_context2.next=4;break;case 28:case\"end\":return _context2.stop();}}},_callee2,null,[[5,20,23,26]]);}));return _readPort.apply(this,arguments);}function writeToPort(_x){return _writeToPort.apply(this,arguments);}// Writes and reads code to/from serial port\nfunction _writeToPort(){_writeToPort=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(lines){var textEncoder,writableStreamClosed,writer;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:// eslint-disable-next-line no-undef\ntextEncoder=new TextEncoderStream();writableStreamClosed=textEncoder.readable.pipeTo(port.writable);writer=textEncoder.writable.getWriter();_context4.next=5;return writer.write(ENTER);case 5:if(!(typeof lines===\"string\")){_context4.next=10;break;}_context4.next=8;return writer.write(lines);case 8:_context4.next=11;break;case 10:if(typeof lines===\"object\"){lines.forEach(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(element){return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return writer.write(element);case 2:_context3.next=4;return writer.write(ENTER);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref.apply(this,arguments);};}());}else{console.error(\"Invalid data type: Use Array or String\");}case 11:case\"end\":return _context4.stop();}}},_callee4);}));return _writeToPort.apply(this,arguments);}function startWebSerial(){return _startWebSerial.apply(this,arguments);}// Serial Port UI Component Hooks\nfunction _startWebSerial(){_startWebSerial=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(){return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return initWebSerial();case 2:if(!_context5.sent){_context5.next=6;break;}//await writeToPort(CONTROL_C)\n//await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\nreadPort();//await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\n_context5.next=6;return writeToPort([CONTROL_C,\"print('hello world')\"]);case 6:case\"end\":return _context5.stop();}}},_callee5);}));return _startWebSerial.apply(this,arguments);}var defaultDirections=\"SPIKE Not Connected, Connect Here: \";var activeSerialDirections=\"Connected, Reboot/Disconnect Here:\";var _useState=useState(defaultDirections),_useState2=_slicedToArray(_useState,2),connectText=_useState2[0],setConnectText=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),serialOn=_useState4[0],setSerialOn=_useState4[1];// Changes functionality of serial port button once serial port is connected\nfunction serialButtonConnected(){setTimeout(function(){setInterval(function(){if(port===null||port===undefined||!port.readable){setSerialOn(false);setConnectText(defaultDirections);}else{setSerialOn(true);setConnectText(activeSerialDirections);}},1000);},500);}// Attempts a WebSerial Connection (associated with button press)\nfunction connectToSPIKE(){startWebSerial();serialButtonConnected();}return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center\",children:/*#__PURE__*/_jsx(SerialButton,{on:serialOn,offColor:\"error\",onColor:\"success\",connectText:connectText,onClick:function onClick(){connectToSPIKE();},restartClick:function restartClick(){console.log(port);writeToPort(CONTROL_D);}})});}export default Serial;","map":{"version":3,"names":["React","useState","SerialButton","Serial","props","port","CONTROL_C","CONTROL_D","ENTER","initWebSerial","navigator","serial","getPorts","requestPort","open","baudRate","console","log","readable","readPort","decoder","TextDecoderStream","inputDone","pipeTo","writable","inputStream","reader","getReader","read","value","done","exportConsole","error","releaseLock","writeToPort","lines","textEncoder","TextEncoderStream","writableStreamClosed","writer","getWriter","write","forEach","element","startWebSerial","defaultDirections","activeSerialDirections","connectText","setConnectText","serialOn","setSerialOn","serialButtonConnected","setTimeout","setInterval","undefined","connectToSPIKE"],"sources":["C:/Users/gsess/Documents/React/repl/src/components/Serial/Serial.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport SerialButton from \"./SerialButton\";\r\n\r\n\r\n\r\n\r\n\r\nfunction Serial(props) {\r\n\r\n    let port = null;\r\n\r\n    const CONTROL_C = '\\x03'; // CTRL-C character \r\n    const CONTROL_D = '\\x04'; // CTRL-D character\r\n    const ENTER = '\\r\\n'; // NEWLINE character\r\n\r\n    /*\r\n        InitWebSerial\r\n        - Initializes a Web Serial Port and returns the initialized port\r\n        - Returns the port if successful, null otherwise\r\n    */\r\n    async function initWebSerial() {\r\n        port = await navigator.serial.getPorts();\r\n\r\n        port = await navigator.serial.requestPort({\r\n            // filters:[filter]\r\n        });\r\n\r\n        // wait for the port to open.\r\n        try {\r\n            await port.open({ baudRate: 115200 });\r\n        }\r\n        catch (er) {\r\n            console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er);\r\n            //await port.close();\r\n        }\r\n\r\n        if (port.readable) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Reads Data from the SPIKE Prime (Uint8Array Format)\r\n    async function readPort() {\r\n        // eslint-disable-next-line no-undef\r\n        let decoder = new TextDecoderStream();\r\n        let inputDone = port.readable.pipeTo(decoder.writable);\r\n        const inputStream = decoder.readable;\r\n\r\n        const reader = inputStream.getReader();\r\n        while (port.readable) {\r\n            //const reader = port.readable.getReader();\r\n            try {\r\n                while (true) {\r\n                const { value, done } = await reader.read();\r\n                if (done) {\r\n                    // |reader| has been canceled.\r\n                    break;\r\n                }\r\n                props.exportConsole(value);\r\n                console.log(value)\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            } finally {\r\n                reader.releaseLock();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // Writes a string (or array of strings) to the SPIKE terminal\r\n    async function writeToPort(lines) {\r\n        // eslint-disable-next-line no-undef\r\n        const textEncoder = new TextEncoderStream();\r\n        const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\r\n\r\n        const writer = textEncoder.writable.getWriter();\r\n\r\n        await writer.write(ENTER)\r\n\r\n        if (typeof(lines) === \"string\")\r\n            await writer.write(lines);\r\n        else if(typeof(lines) === \"object\") {\r\n            lines.forEach(async (element) => {\r\n                \r\n                await writer.write(element)\r\n                await writer.write(ENTER)\r\n            });\r\n\r\n        }\r\n        else {\r\n            console.error(\"Invalid data type: Use Array or String\")\r\n        }\r\n        \r\n\r\n        //writer.releaseLock();\r\n        \r\n    }\r\n\r\n    // Writes and reads code to/from serial port\r\n    async function startWebSerial() {\r\n        if (await initWebSerial()) {\r\n            //await writeToPort(CONTROL_C)\r\n            //await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\r\n\r\n            readPort()\r\n\r\n            //await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\r\n\r\n            await writeToPort([CONTROL_C, \"print('hello world')\"])\r\n            \r\n            \r\n        }\r\n\r\n    }\r\n\r\n\r\n    \r\n    // Serial Port UI Component Hooks\r\n    const defaultDirections = \"SPIKE Not Connected, Connect Here: \";\r\n    const activeSerialDirections = \"Connected, Reboot/Disconnect Here:\"\r\n    const [connectText, setConnectText] = useState(defaultDirections);\r\n    const [serialOn, setSerialOn] = useState(false);\r\n   \r\n\r\n    // Changes functionality of serial port button once serial port is connected\r\n    function serialButtonConnected() {\r\n        setTimeout(() => {\r\n            setInterval(() => {\r\n                if (port === null || port === undefined ||  !port.readable) {\r\n                    setSerialOn(false);\r\n                    setConnectText(defaultDirections)\r\n                }\r\n                else {\r\n                    setSerialOn(true);\r\n                    setConnectText(activeSerialDirections);\r\n                }\r\n            }, 1000);\r\n        }, 500);\r\n        \r\n    }\r\n\r\n    // Attempts a WebSerial Connection (associated with button press)\r\n    function connectToSPIKE() {\r\n        startWebSerial(); \r\n        serialButtonConnected();\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex justify-center\">\r\n            \r\n            <SerialButton on={serialOn} offColor=\"error\" onColor=\"success\" connectText={connectText} onClick={() => {\r\n                connectToSPIKE();\r\n            }} restartClick={() => {\r\n                console.log(port)\r\n                writeToPort(CONTROL_D);\r\n            }} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Serial;"],"mappings":"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"},"metadata":{},"sourceType":"module"}