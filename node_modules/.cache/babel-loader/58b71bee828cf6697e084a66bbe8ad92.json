{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { basicSetup } from 'codemirror';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { oneDark } from '@codemirror/theme-one-dark';\nexport function useCodeMirror(props) {\n  var {\n    value,\n    selection,\n    onChange,\n    onUpdate,\n    extensions = [],\n    autoFocus,\n    theme = 'light',\n    height = '',\n    minHeight = '',\n    maxHeight = '',\n    placeholder: placeholderStr = '',\n    width = '',\n    minWidth = '',\n    maxWidth = '',\n    editable = true,\n    readOnly = false,\n    indentWithTab: defaultIndentWithTab = true,\n    basicSetup: defaultBasicSetup = true,\n    root\n  } = props;\n  var [container, setContainer] = useState(props.container);\n  var [view, setView] = useState();\n  var [state, setState] = useState();\n  var defaultLightThemeOption = EditorView.theme({\n    '&': {\n      backgroundColor: '#fff'\n    }\n  }, {\n    dark: false\n  });\n  var defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth\n    }\n  });\n  var updateListener = EditorView.updateListener.of(vu => {\n    if (vu.docChanged && typeof onChange === 'function') {\n      var doc = vu.state.doc;\n\n      var _value = doc.toString();\n\n      onChange(_value, vu);\n    }\n  });\n  var getExtensions = [updateListener, defaultThemeOption];\n\n  if (defaultIndentWithTab) {\n    getExtensions.unshift(keymap.of([indentWithTab]));\n  }\n\n  if (defaultBasicSetup) {\n    getExtensions.unshift(basicSetup);\n  }\n\n  if (placeholderStr) {\n    getExtensions.unshift(placeholder(placeholderStr));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n\n  if (readOnly) {\n    getExtensions.push(EditorState.readOnly.of(true));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n\n  getExtensions = getExtensions.concat(extensions);\n  useEffect(() => {\n    if (container && !state) {\n      var stateCurrent = EditorState.create({\n        doc: value,\n        selection,\n        extensions: getExtensions\n      });\n      setState(stateCurrent);\n\n      if (!view) {\n        var viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root\n        });\n        setView(viewCurrent);\n      }\n    }\n\n    return () => {\n      if (view) {\n        setView(undefined);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [container, state]);\n  useEffect(() => () => {\n    if (view) {\n      view.destroy();\n      setView(undefined);\n    }\n  }, [view]);\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n  useEffect(() => {\n    var currentValue = view ? view.state.doc.toString() : '';\n\n    if (view && value !== currentValue) {\n      view.dispatch({\n        changes: {\n          from: 0,\n          to: currentValue.length,\n          insert: value || ''\n        }\n      });\n    }\n  }, [value, view]);\n  useEffect(() => {\n    if (view) {\n      view.dispatch({\n        effects: StateEffect.reconfigure.of(getExtensions)\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [theme, extensions, height, minHeight, maxHeight, width, placeholderStr, minWidth, maxWidth, editable, defaultIndentWithTab, defaultBasicSetup]);\n  return {\n    state,\n    setState,\n    view,\n    setView,\n    container,\n    setContainer\n  };\n}","map":{"version":3,"mappings":"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","names":["useEffect","useState","basicSetup","EditorState","StateEffect","indentWithTab","EditorView","keymap","placeholder","oneDark","useCodeMirror","props","value","selection","onChange","onUpdate","extensions","autoFocus","theme","height","minHeight","maxHeight","placeholderStr","width","minWidth","maxWidth","editable","readOnly","defaultIndentWithTab","defaultBasicSetup","root","container","setContainer","view","setView","state","setState","defaultLightThemeOption","backgroundColor","dark","defaultThemeOption","updateListener","of","vu","docChanged","doc","toString","getExtensions","unshift","push","concat","stateCurrent","create","viewCurrent","parent","undefined","destroy","focus","currentValue","dispatch","changes","from","to","length","insert","effects","reconfigure"],"sources":["C:\\Users\\gsess\\node_modules\\@uiw\\react-codemirror\\src\\useCodeMirror.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { basicSetup } from 'codemirror';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, ViewUpdate, placeholder } from '@codemirror/view';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { ReactCodeMirrorProps } from './';\n\nexport interface UseCodeMirror extends ReactCodeMirrorProps {\n  container?: HTMLDivElement | null;\n}\n\nexport function useCodeMirror(props: UseCodeMirror) {\n  const {\n    value,\n    selection,\n    onChange,\n    onUpdate,\n    extensions = [],\n    autoFocus,\n    theme = 'light',\n    height = '',\n    minHeight = '',\n    maxHeight = '',\n    placeholder: placeholderStr = '',\n    width = '',\n    minWidth = '',\n    maxWidth = '',\n    editable = true,\n    readOnly = false,\n    indentWithTab: defaultIndentWithTab = true,\n    basicSetup: defaultBasicSetup = true,\n    root,\n  } = props;\n  const [container, setContainer] = useState(props.container);\n  const [view, setView] = useState<EditorView>();\n  const [state, setState] = useState<EditorState>();\n  const defaultLightThemeOption = EditorView.theme(\n    {\n      '&': {\n        backgroundColor: '#fff',\n      },\n    },\n    {\n      dark: false,\n    },\n  );\n  const defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth,\n    },\n  });\n  const updateListener = EditorView.updateListener.of((vu: ViewUpdate) => {\n    if (vu.docChanged && typeof onChange === 'function') {\n      const doc = vu.state.doc;\n      const value = doc.toString();\n      onChange(value, vu);\n    }\n  });\n  let getExtensions = [updateListener, defaultThemeOption];\n  if (defaultIndentWithTab) {\n    getExtensions.unshift(keymap.of([indentWithTab]));\n  }\n  if (defaultBasicSetup) {\n    getExtensions.unshift(basicSetup);\n  }\n\n  if (placeholderStr) {\n    getExtensions.unshift(placeholder(placeholderStr));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n  if (readOnly) {\n    getExtensions.push(EditorState.readOnly.of(true));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n  getExtensions = getExtensions.concat(extensions);\n\n  useEffect(() => {\n    if (container && !state) {\n      const stateCurrent = EditorState.create({\n        doc: value,\n        selection,\n        extensions: getExtensions,\n      });\n      setState(stateCurrent);\n      if (!view) {\n        const viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root,\n        });\n        setView(viewCurrent);\n      }\n    }\n    return () => {\n      if (view) {\n        setView(undefined);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [container, state]);\n\n  useEffect(\n    () => () => {\n      if (view) {\n        view.destroy();\n        setView(undefined);\n      }\n    },\n    [view],\n  );\n\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n\n  useEffect(() => {\n    const currentValue = view ? view.state.doc.toString() : '';\n    if (view && value !== currentValue) {\n      view.dispatch({\n        changes: { from: 0, to: currentValue.length, insert: value || '' },\n      });\n    }\n  }, [value, view]);\n\n  useEffect(() => {\n    if (view) {\n      view.dispatch({ effects: StateEffect.reconfigure.of(getExtensions) });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    theme,\n    extensions,\n    height,\n    minHeight,\n    maxHeight,\n    width,\n    placeholderStr,\n    minWidth,\n    maxWidth,\n    editable,\n    defaultIndentWithTab,\n    defaultBasicSetup,\n  ]);\n\n  return { state, setState, view, setView, container, setContainer };\n}\n"]},"metadata":{},"sourceType":"module"}