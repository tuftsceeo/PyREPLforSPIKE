{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gsess\\\\Documents\\\\React\\\\repl\\\\src\\\\components\\\\Serial\\\\Serial.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SerialButton from \"./SerialButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Serial(props) {\n  _s();\n\n  const VENDOR_ID = 0x0694; // LEGO SPIKE Prime Hub\n\n  let port = null;\n  const CONTROL_C = '\\x03'; // CTRL-C character \n\n  const CONTROL_D = '\\x04'; // CTRL-D character\n\n  const ENTER = '\\r\\n'; // NEWLINE character\n\n  let isWriteInit = false;\n  let textEncoder;\n  let writableStreamClosed;\n  let writer;\n  /*\r\n      InitWebSerial\r\n      - Initializes a Web Serial Port and returns the initialized port\r\n      - Returns the port if successful, null otherwise\r\n  */\n\n  async function initWebSerial() {\n    port = await navigator.serial.getPorts();\n    port = await navigator.serial.requestPort({// filters:[filter]\n    }); // wait for the port to open.\n\n    try {\n      await port.open({\n        baudRate: 115200\n      });\n    } catch (er) {\n      console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er); //await port.close();\n    }\n\n    if (port.readable) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const [readSerialPort, setReadSerialPort] = useState(true); // Reads Data from the SPIKE Prime (Uint8Array Format)\n\n  async function readPort() {\n    // eslint-disable-next-line no-undef\n    let decoder = new TextDecoderStream();\n    let inputDone = port.readable.pipeTo(decoder.writable);\n    const inputStream = decoder.readable;\n    const reader = inputStream.getReader();\n\n    while (port.readable && readSerialPort) {\n      //const reader = port.readable.getReader();\n      try {\n        while (true) {\n          const {\n            value,\n            done\n          } = await reader.read();\n\n          if (done) {\n            // |reader| has been canceled.\n            break;\n          }\n\n          props.exportConsole(value);\n          console.log(value);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        reader.releaseLock();\n      }\n    }\n  }\n\n  function initWriteStream() {\n    // eslint-disable-next-line no-undef\n    textEncoder = new TextEncoderStream();\n    writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\n    writer = textEncoder.writable.getWriter();\n  } // Writes a string (or array of strings) to the SPIKE terminal\n\n\n  async function writeToPort(lines) {\n    if (!isWriteInit) {\n      initWriteStream();\n      isWriteInit = true;\n    }\n\n    console.log(writableStreamClosed);\n    await writer.write(ENTER);\n    if (typeof lines === \"string\") await writer.write(lines);else if (typeof lines === \"object\") {\n      lines.forEach(async element => {\n        element += ENTER;\n        await writer.write(element); //await writer.write(ENTER)\n      });\n    } else {\n      console.error(\"Invalid data type: Use Array or String\");\n    }\n  } // Writes and reads code to/from serial port\n\n\n  async function startWebSerial() {\n    if (await initWebSerial()) {\n      readPort();\n      await writeToPort([CONTROL_C]);\n      await writeToPort([\"from spike import PrimeHub\", \"hub = PrimeHub()\", \"hub.light_matrix.show_image('SAD')\"]);\n      await writeToPort([\"print('hello')\"]);\n    }\n  } // Serial Port UI Component Hooks\n\n\n  const defaultDirections = \"SPIKE Not Connected, Connect Here: \";\n  const activeSerialDirections = \"Connected, Reboot/Disconnect Here:\";\n  const [connectText, setConnectText] = useState(defaultDirections);\n  const [serialOn, setSerialOn] = useState(false); // Changes functionality of serial port button once serial port is connected\n\n  function serialButtonConnected() {\n    setTimeout(() => {\n      setInterval(() => {\n        if (port.readable) {\n          setSerialOn(true);\n          setConnectText(activeSerialDirections);\n        } else if (port === null || port === undefined || !port.readable) {\n          setSerialOn(false);\n          setConnectText(defaultDirections);\n        }\n      }, 1000);\n    }, 500);\n  } // Attempts a WebSerial Connection (associated with button press)\n\n\n  function connectToSPIKE() {\n    startWebSerial();\n    serialButtonConnected();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(SerialButton, {\n      on: serialOn,\n      offColor: \"error\",\n      onColor: \"success\",\n      connectText: connectText,\n      onClick: () => {\n        connectToSPIKE();\n      },\n      restartClick: () => {\n        console.log(\"Close?\");\n      },\n      runCurrentCode: () => {\n        console.log(props.getCurrentCode());\n        writeToPort([props.getCurrentCode()]);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Serial, \"1JRfKiwwf8pO59pkHbHXequg6d8=\");\n\n_c = Serial;\nexport default Serial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Serial\");","map":{"version":3,"names":["React","useState","SerialButton","Serial","props","VENDOR_ID","port","CONTROL_C","CONTROL_D","ENTER","isWriteInit","textEncoder","writableStreamClosed","writer","initWebSerial","navigator","serial","getPorts","requestPort","open","baudRate","er","console","log","readable","readSerialPort","setReadSerialPort","readPort","decoder","TextDecoderStream","inputDone","pipeTo","writable","inputStream","reader","getReader","value","done","read","exportConsole","error","releaseLock","initWriteStream","TextEncoderStream","getWriter","writeToPort","lines","write","forEach","element","startWebSerial","defaultDirections","activeSerialDirections","connectText","setConnectText","serialOn","setSerialOn","serialButtonConnected","setTimeout","setInterval","undefined","connectToSPIKE","getCurrentCode"],"sources":["C:/Users/gsess/Documents/React/repl/src/components/Serial/Serial.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport SerialButton from \"./SerialButton\";\r\n\r\n\r\n\r\n\r\n\r\nfunction Serial(props) {\r\n\r\n    const VENDOR_ID = 0x0694; // LEGO SPIKE Prime Hub\r\n\r\n    let port = null;\r\n\r\n    const CONTROL_C = '\\x03'; // CTRL-C character \r\n    const CONTROL_D = '\\x04'; // CTRL-D character\r\n    const ENTER = '\\r\\n' // NEWLINE character\r\n\r\n    let isWriteInit = false;\r\n    let textEncoder;\r\n    let writableStreamClosed;\r\n    let writer;\r\n\r\n\r\n    /*\r\n        InitWebSerial\r\n        - Initializes a Web Serial Port and returns the initialized port\r\n        - Returns the port if successful, null otherwise\r\n    */\r\n    async function initWebSerial() {\r\n        port = await navigator.serial.getPorts();\r\n\r\n        port = await navigator.serial.requestPort({\r\n            // filters:[filter]\r\n        });\r\n\r\n        // wait for the port to open.\r\n        try {\r\n            await port.open({ baudRate: 115200 });\r\n        }\r\n        catch (er) {\r\n            console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er);\r\n            //await port.close();\r\n        }\r\n\r\n        if (port.readable) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const [readSerialPort, setReadSerialPort] = useState(true);\r\n\r\n    // Reads Data from the SPIKE Prime (Uint8Array Format)\r\n    async function readPort() {\r\n        // eslint-disable-next-line no-undef\r\n        let decoder = new TextDecoderStream();\r\n        let inputDone = port.readable.pipeTo(decoder.writable);\r\n        const inputStream = decoder.readable;\r\n\r\n        const reader = inputStream.getReader();\r\n        while (port.readable && readSerialPort) {\r\n            //const reader = port.readable.getReader();\r\n            try {\r\n                while (true) {\r\n                const { value, done } = await reader.read();\r\n                if (done) {\r\n                    // |reader| has been canceled.\r\n                    break;\r\n                }\r\n                props.exportConsole(value);\r\n                console.log(value)\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            } finally {\r\n                reader.releaseLock();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function initWriteStream() {\r\n        // eslint-disable-next-line no-undef\r\n        textEncoder = new TextEncoderStream();\r\n        writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\r\n        writer = textEncoder.writable.getWriter();\r\n    }\r\n\r\n    // Writes a string (or array of strings) to the SPIKE terminal\r\n    async function writeToPort(lines) {\r\n        \r\n        \r\n        if (!isWriteInit) {\r\n            initWriteStream()\r\n            isWriteInit = true;\r\n        }\r\n\r\n        console.log(writableStreamClosed);\r\n\r\n        \r\n\r\n        await writer.write(ENTER)\r\n\r\n        if (typeof(lines) === \"string\")\r\n            await writer.write(lines);\r\n        else if(typeof(lines) === \"object\") {\r\n            lines.forEach(async (element) => {\r\n                element += ENTER\r\n                await writer.write(element)\r\n                //await writer.write(ENTER)\r\n            });\r\n        }\r\n        else {\r\n            console.error(\"Invalid data type: Use Array or String\")\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    // Writes and reads code to/from serial port\r\n    async function startWebSerial() {\r\n        if (await initWebSerial()) {\r\n            readPort()\r\n\r\n            await writeToPort([CONTROL_C]);\r\n            await writeToPort([\"from spike import PrimeHub\", \"hub = PrimeHub()\", \"hub.light_matrix.show_image('SAD')\"])\r\n\r\n            await writeToPort([\"print('hello')\"])\r\n            \r\n        }\r\n\r\n    }\r\n    \r\n    // Serial Port UI Component Hooks\r\n    const defaultDirections = \"SPIKE Not Connected, Connect Here: \";\r\n    const activeSerialDirections = \"Connected, Reboot/Disconnect Here:\"\r\n    const [connectText, setConnectText] = useState(defaultDirections);\r\n    const [serialOn, setSerialOn] = useState(false);\r\n   \r\n\r\n    // Changes functionality of serial port button once serial port is connected\r\n    function serialButtonConnected() {\r\n        setTimeout(() => {\r\n            setInterval(() => {\r\n                if (port.readable) {\r\n                    setSerialOn(true);\r\n                    setConnectText(activeSerialDirections);\r\n                }\r\n                else if (port === null || port === undefined ||  !port.readable) {\r\n                    setSerialOn(false);\r\n                    setConnectText(defaultDirections)\r\n                }\r\n                \r\n            }, 1000);\r\n        }, 500);\r\n        \r\n    }\r\n\r\n    // Attempts a WebSerial Connection (associated with button press)\r\n    function connectToSPIKE() {\r\n        startWebSerial(); \r\n        serialButtonConnected();\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex justify-center\">\r\n            \r\n            <SerialButton on={serialOn} offColor=\"error\" onColor=\"success\" connectText={connectText} onClick={() => {\r\n                connectToSPIKE();\r\n            }} restartClick={() => {\r\n                console.log(\"Close?\");\r\n            }} runCurrentCode={() => {\r\n                console.log(props.getCurrentCode());\r\n                writeToPort([props.getCurrentCode()]);\r\n            }}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Serial;"],"mappings":"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"},"metadata":{},"sourceType":"module"}