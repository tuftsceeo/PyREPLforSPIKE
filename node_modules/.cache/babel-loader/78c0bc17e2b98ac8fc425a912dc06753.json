{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gsess\\\\Documents\\\\React\\\\repl\\\\src\\\\components\\\\Serial\\\\Serial.js\";\nimport React, { useState } from \"react\";\nimport SerialButton from \"./SerialButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet port = null;\nconst CONTROL_C = '\\x03'; // CTRL-C character (ETX character)\n\nconst CONTROL_D = '\\x04'; // CTRL-D character (EOT character)\n\n/*\r\n    InitWebSerial\r\n    - Initializes a Web Serial Port and returns the initialized port\r\n    - Returns the port if successful, null otherwise\r\n*/\n\nasync function initWebSerial() {\n  port = await navigator.serial.getPorts();\n  port = await navigator.serial.requestPort({// filters:[filter]\n  }); // wait for the port to open.\n\n  try {\n    await port.open({\n      baudRate: 115200\n    });\n  } catch (er) {\n    console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er); //await port.close();\n  }\n\n  if (port.readable) {\n    return true;\n  } else {\n    return false;\n  }\n} // Reads Data from the SPIKE Prime (Uint8Array Format)\n\n\nasync function readPort() {\n  // eslint-disable-next-line no-undef\n  let decoder = new TextDecoderStream();\n  let inputDone = port.readable.pipeTo(decoder.writable);\n  const inputStream = decoder.readable;\n  const reader = inputStream.getReader();\n\n  while (port.readable) {\n    //const reader = port.readable.getReader();\n    try {\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n\n        if (done) {\n          // |reader| has been canceled.\n          break;\n        }\n\n        console.log(value);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      reader.releaseLock();\n    }\n  }\n} // Writes a string (or array of strings) to the SPIKE terminal\n\n\nasync function writeToPort(lines) {\n  // eslint-disable-next-line no-undef\n  const textEncoder = new TextEncoderStream();\n  const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\n  const writer = textEncoder.writable.getWriter();\n  if (typeof lines === \"string\") await writer.write(lines);else if (typeof lines === \"object\") {\n    lines.forEach(async element => {\n      console.log(element);\n      await writer.write(element);\n    });\n  } else {\n    console.error(\"Invalid data type: Use Array or String\");\n  } //writer.releaseLock();\n}\n\nasync function startWebSerial() {\n  if (await initWebSerial()) {\n    //await writeToPort(CONTROL_C)\n    //await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\n    readPort();\n    await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"]);\n  }\n}\n\nfunction Serial() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(SerialButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Serial;\nexport default Serial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Serial\");","map":{"version":3,"names":["React","useState","SerialButton","port","CONTROL_C","CONTROL_D","initWebSerial","navigator","serial","getPorts","requestPort","open","baudRate","er","console","log","readable","readPort","decoder","TextDecoderStream","inputDone","pipeTo","writable","inputStream","reader","getReader","value","done","read","error","releaseLock","writeToPort","lines","textEncoder","TextEncoderStream","writableStreamClosed","writer","getWriter","write","forEach","element","startWebSerial","Serial"],"sources":["C:/Users/gsess/Documents/React/repl/src/components/Serial/Serial.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport SerialButton from \"./SerialButton\";\r\n\r\nlet port = null;\r\n\r\nconst CONTROL_C = '\\x03'; // CTRL-C character (ETX character)\r\nconst CONTROL_D = '\\x04'; // CTRL-D character (EOT character)\r\n\r\n/*\r\n    InitWebSerial\r\n    - Initializes a Web Serial Port and returns the initialized port\r\n    - Returns the port if successful, null otherwise\r\n*/\r\nasync function initWebSerial() {\r\n    port = await navigator.serial.getPorts();\r\n\r\n    port = await navigator.serial.requestPort({\r\n        // filters:[filter]\r\n    });\r\n\r\n    // wait for the port to open.\r\n    try {\r\n        await port.open({ baudRate: 115200 });\r\n    }\r\n    catch (er) {\r\n        console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er);\r\n        //await port.close();\r\n    }\r\n\r\n    if (port.readable) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\n// Reads Data from the SPIKE Prime (Uint8Array Format)\r\nasync function readPort() {\r\n    // eslint-disable-next-line no-undef\r\n    let decoder = new TextDecoderStream();\r\n    let inputDone = port.readable.pipeTo(decoder.writable);\r\n    const inputStream = decoder.readable;\r\n\r\n    const reader = inputStream.getReader();\r\n    while (port.readable) {\r\n        //const reader = port.readable.getReader();\r\n        try {\r\n            while (true) {\r\n            const { value, done } = await reader.read();\r\n            if (done) {\r\n                // |reader| has been canceled.\r\n                break;\r\n            }\r\n            console.log(value);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            reader.releaseLock();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Writes a string (or array of strings) to the SPIKE terminal\r\nasync function writeToPort(lines) {\r\n    // eslint-disable-next-line no-undef\r\n    const textEncoder = new TextEncoderStream();\r\n    const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\r\n\r\n    const writer = textEncoder.writable.getWriter();\r\n\r\n    if (typeof(lines) === \"string\")\r\n        await writer.write(lines);\r\n    else if(typeof(lines) === \"object\") {\r\n        lines.forEach(async (element) => {\r\n            console.log(element)\r\n            await writer.write(element);\r\n        });\r\n    }\r\n    else {\r\n        console.error(\"Invalid data type: Use Array or String\")\r\n    }\r\n    \r\n\r\n    //writer.releaseLock();\r\n    \r\n}\r\nasync function startWebSerial() {\r\n    if (await initWebSerial()) {\r\n        //await writeToPort(CONTROL_C)\r\n        //await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\r\n        \r\n        readPort()\r\n        await writeToPort([CONTROL_C, \"from spike import PrimeHub\", \"hub = Primehub()\", \"hub.light_matrix.show_image('HAPPY')\"])\r\n    }\r\n\r\n}\r\n\r\nfunction Serial() {\r\n    \r\n\r\n    return (\r\n        <div className=\"flex justify-center\">\r\n            \r\n            <SerialButton />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Serial;"],"mappings":"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"},"metadata":{},"sourceType":"module"}