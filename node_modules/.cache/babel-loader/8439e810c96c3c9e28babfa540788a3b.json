{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar EventEmitter = require('events').EventEmitter;\n\nvar spawn = require('child_process').spawn;\n\nvar path = require('path');\n\nvar dirname = path.dirname;\nvar basename = path.basename;\n\nvar fs = require('fs');\n/**\n * Inherit `Command` from `EventEmitter.prototype`.\n */\n\n\nrequire('util').inherits(Command, EventEmitter);\n/**\n * Expose the root command.\n */\n\n\nexports = module.exports = new Command();\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = flags.indexOf('<') >= 0; // A value must be supplied when the option is specified.\n\n  this.optional = flags.indexOf('[') >= 0; // A value is optional when the option is specified.\n\n  this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n\n  this.negate = flags.indexOf('-no-') !== -1;\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\n\nOption.prototype.name = function () {\n  return this.long.replace(/^--/, '');\n};\n/**\n * Return option name, in a camelcase format that can be used\n * as a object attribute key.\n *\n * @return {String}\n * @api private\n */\n\n\nOption.prototype.attributeName = function () {\n  return camelcase(this.name().replace(/^no-/, ''));\n};\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\n\nOption.prototype.is = function (arg) {\n  return this.short === arg || this.long === arg;\n};\n/**\n * CommanderError class\n * @class\n */\n\n\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {Number} exitCode suggested exit code which could be used with process.exit\n   * @param {String} code an id string representing the error\n   * @param {String} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message); // properly capture stack trace in Node.js\n\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n  }\n\n}\n\nexports.CommanderError = CommanderError;\n/**\n * Initialize a new `Command`.\n *\n * @param {String} [name]\n * @api public\n */\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = new Set();\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n  this._optionValues = {};\n  this._storeOptionsAsProperties = true; // backwards compatible by default\n\n  this._passCommandToAction = true; // backwards compatible by default\n\n  this._actionResults = [];\n  this._helpFlags = '-h, --help';\n  this._helpDescription = 'output usage information';\n  this._helpShortFlag = '-h';\n  this._helpLongFlag = '--help';\n}\n/**\n * Define a command.\n *\n * There are two styles of command: pay attention to where to put the description.\n *\n * Examples:\n *\n *      // Command implemented using action handler (description is supplied separately to `.command`)\n *      program\n *        .command('clone <source> [destination]')\n *        .description('clone a repository into a newly created directory')\n *        .action((source, destination) => {\n *          console.log('clone command called');\n *        });\n *\n *      // Command implemented using separate executable file (description is second parameter to `.command`)\n *      program\n *        .command('start <service>', 'start named service')\n *        .command('stop [service]', 'stop named service, or all if no name supplied');\n *\n * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n * @param {Object} [execOpts] - configuration options (for executable)\n * @return {Command} returns new command for action handler, or top-level command for executable command\n * @api public\n */\n\n\nCommand.prototype.command = function (nameAndArgs, actionOptsOrExecDesc, execOpts) {\n  var desc = actionOptsOrExecDesc;\n  var opts = execOpts;\n\n  if (typeof desc === 'object' && desc !== null) {\n    opts = desc;\n    desc = null;\n  }\n\n  opts = opts || {};\n  var args = nameAndArgs.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n\n    this._execs.add(cmd._name);\n\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n\n  cmd._noHelp = !!opts.noHelp;\n  cmd._helpFlags = this._helpFlags;\n  cmd._helpDescription = this._helpDescription;\n  cmd._helpShortFlag = this._helpShortFlag;\n  cmd._helpLongFlag = this._helpLongFlag;\n  cmd._exitCallback = this._exitCallback;\n  cmd._storeOptionsAsProperties = this._storeOptionsAsProperties;\n  cmd._passCommandToAction = this._passCommandToAction;\n  cmd._executableFile = opts.executableFile; // Custom name for executable file\n\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n  if (desc) return this;\n  return cmd;\n};\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\n\nCommand.prototype.arguments = function (desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\n\nCommand.prototype.addImplicitHelpCommand = function () {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.parseExpectedArgs = function (args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function (arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n/**\n * Register callback to use as replacement for calling process.exit.\n *\n * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.exitOverride = function (fn) {\n  if (fn) {\n    this._exitCallback = fn;\n  } else {\n    this._exitCallback = function (err) {\n      if (err.code !== 'commander.executeSubCommandAsync') {\n        throw err;\n      } else {// Async callback from spawn events, not useful to throw.\n      }\n    };\n  }\n\n  return this;\n};\n/**\n * Call process.exit, and _exitCallback if defined.\n *\n * @param {Number} exitCode exit code for using with process.exit\n * @param {String} code an id string representing the error\n * @param {String} message human-readable description of the error\n * @return never\n * @api private\n */\n\n\nCommand.prototype._exit = function (exitCode, code, message) {\n  if (this._exitCallback) {\n    this._exitCallback(new CommanderError(exitCode, code, message)); // Expecting this line is not reached.\n\n  }\n\n  process.exit(exitCode);\n};\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.action = function (fn) {\n  var self = this;\n\n  var listener = function (args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n    var parsed = self.parseOptions(unknown); // Output help if necessary\n\n    outputHelpIfRequested(self, parsed.unknown);\n\n    self._checkForMissingMandatoryOptions(); // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n\n\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    } // Leftover arguments need to be pushed back. Fixes issue #56\n\n\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function (arg, i) {\n      if (arg.required && args[i] == null) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    }); // The .action callback takes an extra parameter which is the command itself.\n\n\n    var expectedArgsCount = self._args.length;\n    var actionArgs = args.slice(0, expectedArgsCount);\n\n    if (self._passCommandToAction) {\n      actionArgs[expectedArgsCount] = self;\n    } else {\n      actionArgs[expectedArgsCount] = self.opts();\n    } // Add the extra arguments so available too.\n\n\n    if (args.length > expectedArgsCount) {\n      actionArgs.push(args.slice(expectedArgsCount));\n    }\n\n    const actionResult = fn.apply(self, actionArgs); // Remember result in case it is async. Assume parseAsync getting called on root.\n\n    let rootCommand = self;\n\n    while (rootCommand.parent) {\n      rootCommand = rootCommand.parent;\n    }\n\n    rootCommand._actionResults.push(actionResult);\n  };\n\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on('command:' + name, listener);\n  if (this._alias) parent.on('command:' + this._alias, listener);\n  return this;\n};\n/**\n * Internal implementation shared by .option() and .requiredOption()\n *\n * @param {Object} config\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] - custom option processing function or default vaue\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api private\n */\n\n\nCommand.prototype._optionEx = function (config, flags, description, fn, defaultValue) {\n  var self = this,\n      option = new Option(flags, description),\n      oname = option.name(),\n      name = option.attributeName();\n  option.mandatory = !!config.mandatory; // default as 3rd arg\n\n  if (typeof fn !== 'function') {\n    if (fn instanceof RegExp) {\n      // This is a bit simplistic (especially no error messages), and probably better handled by caller using custom option processing.\n      // No longer documented in README, but still present for backwards compatibility.\n      var regex = fn;\n\n      fn = function (val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n    } else {\n      defaultValue = fn;\n      fn = null;\n    }\n  } // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\n\n\n  if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\n    // when --no-foo we make sure default is true, unless a --foo option is already defined\n    if (option.negate) {\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      defaultValue = self.optionFor(positiveLongFlag) ? self._getOptionValue(name) : true;\n    } // preassign only if we have a default\n\n\n    if (defaultValue !== undefined) {\n      self._setOptionValue(name, defaultValue);\n\n      option.defaultValue = defaultValue;\n    }\n  } // register the option\n\n\n  this.options.push(option); // when it's passed assign the value\n  // and conditionally invoke the callback\n\n  this.on('option:' + oname, function (val) {\n    // coercion\n    if (val !== null && fn) {\n      val = fn(val, self._getOptionValue(name) === undefined ? defaultValue : self._getOptionValue(name));\n    } // unassigned or boolean value\n\n\n    if (typeof self._getOptionValue(name) === 'boolean' || typeof self._getOptionValue(name) === 'undefined') {\n      // if no value, negate false, and we have a default, then use it!\n      if (val == null) {\n        self._setOptionValue(name, option.negate ? false : defaultValue || true);\n      } else {\n        self._setOptionValue(name, val);\n      }\n    } else if (val !== null) {\n      // reassign\n      self._setOptionValue(name, option.negate ? false : val);\n    }\n  });\n  return this;\n};\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to undefined\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     program.pepper\n *     // => undefined\n *\n *     --pepper\n *     program.pepper\n *     // => true\n *\n *     // simple boolean defaulting to true (unless non-negated option is also defined)\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] - custom option processing function or default vaue\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.option = function (flags, description, fn, defaultValue) {\n  return this._optionEx({}, flags, description, fn, defaultValue);\n};\n/*\n * Add a required option which must have a value after parsing. This usually means\n * the option must be specified on the command line. (Otherwise the same as .option().)\n *\n * The `flags` string should contain both the short and long flags, separated by comma, a pipe or space.\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] - custom option processing function or default vaue\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.requiredOption = function (flags, description, fn, defaultValue) {\n  return this._optionEx({\n    mandatory: true\n  }, flags, description, fn, defaultValue);\n};\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\n\n\nCommand.prototype.allowUnknownOption = function (arg) {\n  this._allowUnknownOption = arguments.length === 0 || arg;\n  return this;\n};\n/**\n  * Whether to store option values as properties on command object,\n  * or store separately (specify false). In both cases the option values can be accessed using .opts().\n  *\n  * @param {boolean} value\n  * @return {Command} Command for chaining\n  * @api public\n  */\n\n\nCommand.prototype.storeOptionsAsProperties = function (value) {\n  this._storeOptionsAsProperties = value === undefined || value;\n\n  if (this.options.length) {\n    // This is for programmer, not end user.\n    console.error('Commander usage error: call storeOptionsAsProperties before adding options');\n  }\n\n  return this;\n};\n/**\n  * Whether to pass command to action handler,\n  * or just the options (specify false).\n  *\n  * @param {boolean} value\n  * @return {Command} Command for chaining\n  * @api public\n  */\n\n\nCommand.prototype.passCommandToAction = function (value) {\n  this._passCommandToAction = value === undefined || value;\n  return this;\n};\n/**\n * Store option value\n *\n * @param {String} key\n * @param {Object} value\n * @api private\n */\n\n\nCommand.prototype._setOptionValue = function (key, value) {\n  if (this._storeOptionsAsProperties) {\n    this[key] = value;\n  } else {\n    this._optionValues[key] = value;\n  }\n};\n/**\n * Retrieve option value\n *\n * @param {String} key\n * @return {Object} value\n * @api private\n */\n\n\nCommand.prototype._getOptionValue = function (key) {\n  if (this._storeOptionsAsProperties) {\n    return this[key];\n  }\n\n  return this._optionValues[key];\n};\n/**\n * Parse `argv`, setting options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.parse = function (argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand(); // store raw args\n\n  this.rawArgs = argv; // guess name\n\n  this._name = this._name || basename(argv[1], '.js'); // github-style sub-commands with no sub-command\n\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push(this._helpLongFlag);\n  } // process argv\n\n\n  var normalized = this.normalize(argv.slice(2));\n  var parsed = this.parseOptions(normalized);\n  var args = this.args = parsed.args;\n  var result = this.parseArgs(this.args, parsed.unknown);\n  if (args[0] === 'help' && args.length === 1) this.help(); // Note for future: we could return early if we found an action handler in parseArgs, as none of following code needed?\n  // <cmd> --help\n\n  if (args[0] === 'help') {\n    args[0] = args[1];\n    args[1] = this._helpLongFlag;\n  } else {\n    // If calling through to executable subcommand we could check for help flags before failing,\n    // but a somewhat unlikely case since program options not passed to executable subcommands.\n    // Wait for reports to see if check needed and what usage pattern is.\n    this._checkForMissingMandatoryOptions();\n  } // executable sub-commands\n  // (Debugging note for future: args[0] is not right if an action has been called)\n\n\n  var name = result.args[0];\n  var subCommand = null; // Look for subcommand\n\n  if (name) {\n    subCommand = this.commands.find(function (command) {\n      return command._name === name;\n    });\n  } // Look for alias\n\n\n  if (!subCommand && name) {\n    subCommand = this.commands.find(function (command) {\n      return command.alias() === name;\n    });\n\n    if (subCommand) {\n      name = subCommand._name;\n      args[0] = name;\n    }\n  } // Look for default subcommand\n\n\n  if (!subCommand && this.defaultExecutable) {\n    name = this.defaultExecutable;\n    args.unshift(name);\n    subCommand = this.commands.find(function (command) {\n      return command._name === name;\n    });\n  }\n\n  if (this._execs.has(name)) {\n    return this.executeSubCommand(argv, args, parsed.unknown, subCommand ? subCommand._executableFile : undefined);\n  }\n\n  return result;\n};\n/**\n * Parse `argv`, setting options and invoking commands when defined.\n *\n * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n *\n * @param {Array} argv\n * @return {Promise}\n * @api public\n */\n\n\nCommand.prototype.parseAsync = function (argv) {\n  this.parse(argv);\n  return Promise.all(this._actionResults);\n};\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @param {String} executableFile\n * @api private\n */\n\n\nCommand.prototype.executeSubCommand = function (argv, args, unknown, executableFile) {\n  args = args.concat(unknown);\n  if (!args.length) this.help();\n  var isExplicitJS = false; // Whether to use node to launch \"executable\"\n  // executable\n\n  var pm = argv[1]; // name of the subcommand, like `pm-install`\n\n  var bin = basename(pm, path.extname(pm)) + '-' + args[0];\n\n  if (executableFile != null) {\n    bin = executableFile; // Check for same extensions as we scan for below so get consistent launch behaviour.\n\n    var executableExt = path.extname(executableFile);\n    isExplicitJS = executableExt === '.js' || executableExt === '.ts' || executableExt === '.mjs';\n  } // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n\n\n  var baseDir;\n  var resolvedLink = fs.realpathSync(pm);\n  baseDir = dirname(resolvedLink); // prefer local `./<bin>` to bin in the $PATH\n\n  var localBin = path.join(baseDir, bin); // whether bin file is a js script with explicit `.js` or `.ts` extension\n\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin + '.ts')) {\n    bin = localBin + '.ts';\n    isExplicitJS = true;\n  } else if (exists(localBin + '.mjs')) {\n    bin = localBin + '.mjs';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n  var proc;\n\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(bin); // add executable arguments to spawn\n\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = spawn(process.argv[0], args, {\n        stdio: 'inherit'\n      });\n    } else {\n      proc = spawn(bin, args, {\n        stdio: 'inherit'\n      });\n    }\n  } else {\n    args.unshift(bin); // add executable arguments to spawn\n\n    args = incrementNodeInspectorPort(process.execArgv).concat(args);\n    proc = spawn(process.execPath, args, {\n      stdio: 'inherit'\n    });\n  }\n\n  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n  signals.forEach(function (signal) {\n    process.on(signal, function () {\n      if (proc.killed === false && proc.exitCode === null) {\n        proc.kill(signal);\n      }\n    });\n  }); // By default terminate process when spawned process terminates.\n  // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n\n  const exitCallback = this._exitCallback;\n\n  if (!exitCallback) {\n    proc.on('close', process.exit.bind(process));\n  } else {\n    proc.on('close', () => {\n      exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n    });\n  }\n\n  proc.on('error', function (err) {\n    if (err.code === 'ENOENT') {\n      console.error('error: %s(1) does not exist, try --help', bin);\n    } else if (err.code === 'EACCES') {\n      console.error('error: %s(1) not executable. try chmod or run with root', bin);\n    }\n\n    if (!exitCallback) {\n      process.exit(1);\n    } else {\n      const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n      wrappedError.nestedError = err;\n      exitCallback(wrappedError);\n    }\n  }); // Store the reference to the child process\n\n  this.runningCommand = proc;\n};\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\n\nCommand.prototype.normalize = function (args) {\n  var ret = [],\n      arg,\n      lastOpt,\n      index,\n      short,\n      opt;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i - 1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n      short = arg.slice(0, 2);\n      opt = this.optionFor(short);\n\n      if (opt && (opt.required || opt.optional)) {\n        ret.push(short);\n        ret.push(arg.slice(2));\n      } else {\n        arg.slice(1).split('').forEach(function (c) {\n          ret.push('-' + c);\n        });\n      }\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\n\nCommand.prototype.parseArgs = function (args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n\n    if (this.listeners('command:' + name).length) {\n      this.emit('command:' + args.shift(), args, unknown);\n    } else {\n      this.emit('command:*', args, unknown);\n    }\n  } else {\n    outputHelpIfRequested(this, unknown); // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n\n    if (unknown.length > 0 && !this.defaultExecutable) {\n      this.unknownOption(unknown[0]);\n    }\n\n    if (this.commands.length === 0 && this._args.filter(function (a) {\n      return a.required;\n    }).length === 0) {\n      this.emit('command:*');\n    }\n  }\n\n  return this;\n};\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\n\nCommand.prototype.optionFor = function (arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n/**\n * Display an error message if a mandatory option does not have a value.\n *\n * @api private\n */\n\n\nCommand.prototype._checkForMissingMandatoryOptions = function () {\n  // Walk up hierarchy so can call from action handler after checking for displaying help.\n  for (var cmd = this; cmd; cmd = cmd.parent) {\n    cmd.options.forEach(anOption => {\n      if (anOption.mandatory && cmd._getOptionValue(anOption.attributeName()) === undefined) {\n        cmd.missingMandatoryOptionValue(anOption);\n      }\n    });\n  }\n};\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {{args: Array, unknown: Array}}\n * @api public\n */\n\n\nCommand.prototype.parseOptions = function (argv) {\n  var args = [],\n      len = argv.length,\n      literal,\n      option,\n      arg;\n  var unknownOptions = []; // parse options\n\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i]; // literal args after --\n\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    if (arg === '--') {\n      literal = true;\n      continue;\n    } // find matching Option\n\n\n    option = this.optionFor(arg); // option is defined\n\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (arg == null) return this.optionMissingArgument(option);\n        this.emit('option:' + option.name(), arg); // optional arg\n      } else if (option.optional) {\n        arg = argv[i + 1];\n\n        if (arg == null || arg[0] === '-' && arg !== '-') {\n          arg = null;\n        } else {\n          ++i;\n        }\n\n        this.emit('option:' + option.name(), arg); // flag\n      } else {\n        this.emit('option:' + option.name());\n      }\n\n      continue;\n    } // looks like an option\n\n\n    if (arg.length > 1 && arg[0] === '-') {\n      unknownOptions.push(arg); // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n\n      if (i + 1 < argv.length && (argv[i + 1][0] !== '-' || argv[i + 1] === '-')) {\n        unknownOptions.push(argv[++i]);\n      }\n\n      continue;\n    } // arg\n\n\n    args.push(arg);\n  }\n\n  return {\n    args: args,\n    unknown: unknownOptions\n  };\n};\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\n\n\nCommand.prototype.opts = function () {\n  if (this._storeOptionsAsProperties) {\n    // Preserve original behaviour so backwards compatible when still using properties\n    var result = {},\n        len = this.options.length;\n\n    for (var i = 0; i < len; i++) {\n      var key = this.options[i].attributeName();\n      result[key] = key === this._versionOptionName ? this._version : this[key];\n    }\n\n    return result;\n  }\n\n  return this._optionValues;\n};\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\n\nCommand.prototype.missingArgument = function (name) {\n  const message = `error: missing required argument '${name}'`;\n  console.error(message);\n\n  this._exit(1, 'commander.missingArgument', message);\n};\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {Option} option\n * @param {String} [flag]\n * @api private\n */\n\n\nCommand.prototype.optionMissingArgument = function (option, flag) {\n  let message;\n\n  if (flag) {\n    message = `error: option '${option.flags}' argument missing, got '${flag}'`;\n  } else {\n    message = `error: option '${option.flags}' argument missing`;\n  }\n\n  console.error(message);\n\n  this._exit(1, 'commander.optionMissingArgument', message);\n};\n/**\n * `Option` does not have a value, and is a mandatory option.\n *\n * @param {Option} option\n * @api private\n */\n\n\nCommand.prototype.missingMandatoryOptionValue = function (option) {\n  const message = `error: required option '${option.flags}' not specified`;\n  console.error(message);\n\n  this._exit(1, 'commander.missingMandatoryOptionValue', message);\n};\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\n\nCommand.prototype.unknownOption = function (flag) {\n  if (this._allowUnknownOption) return;\n  const message = `error: unknown option '${flag}'`;\n  console.error(message);\n\n  this._exit(1, 'commander.unknownOption', message);\n};\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\n\nCommand.prototype.variadicArgNotLast = function (name) {\n  const message = `error: variadic arguments must be last '${name}'`;\n  console.error(message);\n\n  this._exit(1, 'commander.variadicArgNotLast', message);\n};\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * You can optionally supply the  flags and description to override the defaults.\n *\n * @param {String} str\n * @param {String} [flags]\n * @param {String} [description]\n * @return {Command} for chaining\n * @api public\n */\n\n\nCommand.prototype.version = function (str, flags, description) {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  description = description || 'output the version number';\n  var versionOption = new Option(flags, description);\n  this._versionOptionName = versionOption.long.substr(2) || 'version';\n  this.options.push(versionOption);\n  var self = this;\n  this.on('option:' + this._versionOptionName, function () {\n    process.stdout.write(str + '\\n');\n\n    self._exit(0, 'commander.version', str);\n  });\n  return this;\n};\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @param {Object} [argsDescription]\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.description = function (str, argsDescription) {\n  if (arguments.length === 0) return this._description;\n  this._description = str;\n  this._argsDescription = argsDescription;\n  return this;\n};\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.alias = function (alias) {\n  var command = this;\n\n  if (this.commands.length !== 0) {\n    command = this.commands[this.commands.length - 1];\n  }\n\n  if (arguments.length === 0) return command._alias;\n  if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n  command._alias = alias;\n  return this;\n};\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} [str]\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.usage = function (str) {\n  var args = this._args.map(function (arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]' + (this.commands.length ? ' [command]' : '') + (this._args.length ? ' ' + args.join(' ') : '');\n  if (arguments.length === 0) return this._usage || usage;\n  this._usage = str;\n  return this;\n};\n/**\n * Get or set the name of the command\n *\n * @param {String} [str]\n * @return {String|Command}\n * @api public\n */\n\n\nCommand.prototype.name = function (str) {\n  if (arguments.length === 0) return this._name;\n  this._name = str;\n  return this;\n};\n/**\n * Return prepared commands.\n *\n * @return {Array}\n * @api private\n */\n\n\nCommand.prototype.prepareCommands = function () {\n  return this.commands.filter(function (cmd) {\n    return !cmd._noHelp;\n  }).map(function (cmd) {\n    var args = cmd._args.map(function (arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [cmd._name + (cmd._alias ? '|' + cmd._alias : '') + (cmd.options.length ? ' [options]' : '') + (args ? ' ' + args : ''), cmd._description];\n  });\n};\n/**\n * Return the largest command length.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.largestCommandLength = function () {\n  var commands = this.prepareCommands();\n  return commands.reduce(function (max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n};\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.largestOptionLength = function () {\n  var options = [].slice.call(this.options);\n  options.push({\n    flags: this._helpFlags\n  });\n  return options.reduce(function (max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n/**\n * Return the largest arg length.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.largestArgLength = function () {\n  return this._args.reduce(function (max, arg) {\n    return Math.max(max, arg.name.length);\n  }, 0);\n};\n/**\n * Return the pad width.\n *\n * @return {Number}\n * @api private\n */\n\n\nCommand.prototype.padWidth = function () {\n  var width = this.largestOptionLength();\n\n  if (this._argsDescription && this._args.length) {\n    if (this.largestArgLength() > width) {\n      width = this.largestArgLength();\n    }\n  }\n\n  if (this.commands && this.commands.length) {\n    if (this.largestCommandLength() > width) {\n      width = this.largestCommandLength();\n    }\n  }\n\n  return width;\n};\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\n\nCommand.prototype.optionHelp = function () {\n  var width = this.padWidth();\n  var columns = process.stdout.columns || 80;\n  var descriptionWidth = columns - width - 4; // Append the help information\n\n  return this.options.map(function (option) {\n    const fullDesc = option.description + (!option.negate && option.defaultValue !== undefined ? ' (default: ' + JSON.stringify(option.defaultValue) + ')' : '');\n    return pad(option.flags, width) + '  ' + optionalWrap(fullDesc, descriptionWidth, width + 2);\n  }).concat([pad(this._helpFlags, width) + '  ' + optionalWrap(this._helpDescription, descriptionWidth, width + 2)]).join('\\n');\n};\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\n\nCommand.prototype.commandHelp = function () {\n  if (!this.commands.length) return '';\n  var commands = this.prepareCommands();\n  var width = this.padWidth();\n  var columns = process.stdout.columns || 80;\n  var descriptionWidth = columns - width - 4;\n  return ['Commands:', commands.map(function (cmd) {\n    var desc = cmd[1] ? '  ' + cmd[1] : '';\n    return (desc ? pad(cmd[0], width) : cmd[0]) + optionalWrap(desc, descriptionWidth, width + 2);\n  }).join('\\n').replace(/^/gm, '  '), ''].join('\\n');\n};\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\n\nCommand.prototype.helpInformation = function () {\n  var desc = [];\n\n  if (this._description) {\n    desc = [this._description, ''];\n    var argsDescription = this._argsDescription;\n\n    if (argsDescription && this._args.length) {\n      var width = this.padWidth();\n      var columns = process.stdout.columns || 80;\n      var descriptionWidth = columns - width - 5;\n      desc.push('Arguments:');\n      desc.push('');\n\n      this._args.forEach(function (arg) {\n        desc.push('  ' + pad(arg.name, width) + '  ' + wrap(argsDescription[arg.name], descriptionWidth, width + 4));\n      });\n\n      desc.push('');\n    }\n  }\n\n  var cmdName = this._name;\n\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n\n  var parentCmdNames = '';\n\n  for (var parentCmd = this.parent; parentCmd; parentCmd = parentCmd.parent) {\n    parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n  }\n\n  var usage = ['Usage: ' + parentCmdNames + cmdName + ' ' + this.usage(), ''];\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n  var options = ['Options:', '' + this.optionHelp().replace(/^/gm, '  '), ''];\n  return usage.concat(desc).concat(options).concat(cmds).join('\\n');\n};\n/**\n * Output help information for this command.\n *\n * When listener(s) are available for the helpLongFlag\n * those callbacks are invoked.\n *\n * @api public\n */\n\n\nCommand.prototype.outputHelp = function (cb) {\n  if (!cb) {\n    cb = function (passthru) {\n      return passthru;\n    };\n  }\n\n  const cbOutput = cb(this.helpInformation());\n\n  if (typeof cbOutput !== 'string' && !Buffer.isBuffer(cbOutput)) {\n    throw new Error('outputHelp callback must return a string or a Buffer');\n  }\n\n  process.stdout.write(cbOutput);\n  this.emit(this._helpLongFlag);\n};\n/**\n * You can pass in flags and a description to override the help\n * flags and help description for your command.\n *\n * @param {String} [flags]\n * @param {String} [description]\n * @return {Command}\n * @api public\n */\n\n\nCommand.prototype.helpOption = function (flags, description) {\n  this._helpFlags = flags || this._helpFlags;\n  this._helpDescription = description || this._helpDescription;\n\n  var splitFlags = this._helpFlags.split(/[ ,|]+/);\n\n  if (splitFlags.length > 1) this._helpShortFlag = splitFlags.shift();\n  this._helpLongFlag = splitFlags.shift();\n  return this;\n};\n/**\n * Output help information and exit.\n *\n * @param {Function} [cb]\n * @api public\n */\n\n\nCommand.prototype.help = function (cb) {\n  this.outputHelp(cb); // exitCode: preserving original behaviour which was calling process.exit()\n  // message: do not have all displayed text available so only passing placeholder.\n\n  this._exit(process.exitCode || 0, 'commander.help', '(outputHelp)');\n};\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function (str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n/**\n * Wraps the given string with line breaks at the specified width while breaking\n * words and indenting every but the first line on the left.\n *\n * @param {String} str\n * @param {Number} width\n * @param {Number} indent\n * @return {String}\n * @api private\n */\n\n\nfunction wrap(str, width, indent) {\n  var regex = new RegExp('.{1,' + (width - 1) + '}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)', 'g');\n  var lines = str.match(regex) || [];\n  return lines.map(function (line, i) {\n    if (line.slice(-1) === '\\n') {\n      line = line.slice(0, line.length - 1);\n    }\n\n    return (i > 0 && indent ? Array(indent + 1).join(' ') : '') + line.trimRight();\n  }).join('\\n');\n}\n/**\n * Optionally wrap the given str to a max width of width characters per line\n * while indenting with indent spaces. Do not wrap if insufficient width or\n * string is manually formatted.\n *\n * @param {String} str\n * @param {Number} width\n * @param {Number} indent\n * @return {String}\n * @api private\n */\n\n\nfunction optionalWrap(str, width, indent) {\n  // Detect manually wrapped and indented strings by searching for line breaks\n  // followed by multiple spaces/tabs.\n  if (str.match(/[\\n]\\s+/)) return str; // Do not wrap to narrow columns (or can end up with a word per line).\n\n  const minWidth = 40;\n  if (width < minWidth) return str;\n  return wrap(str, width, indent);\n}\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} options - array of options to search for -h or --help\n * @api private\n */\n\n\nfunction outputHelpIfRequested(cmd, options) {\n  options = options || [];\n\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] === cmd._helpLongFlag || options[i] === cmd._helpShortFlag) {\n      cmd.outputHelp(); // (Do not have all displayed text available so only passing placeholder.)\n\n      cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n} // for versions before node v0.8 when there weren't `fs.existsSync`\n\n\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map(arg => {\n    var result = arg;\n\n    if (arg.indexOf('--inspect') === 0) {\n      var debugOption;\n      var debugHost = '127.0.0.1';\n      var debugPort = '9229';\n      var match;\n\n      if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n        // e.g. --inspect\n        debugOption = match[1];\n      } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n        debugOption = match[1];\n\n        if (/^\\d+$/.test(match[3])) {\n          // e.g. --inspect=1234\n          debugPort = match[3];\n        } else {\n          // e.g. --inspect=localhost\n          debugHost = match[3];\n        }\n      } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n        // e.g. --inspect=localhost:1234\n        debugOption = match[1];\n        debugHost = match[3];\n        debugPort = match[4];\n      }\n\n      if (debugOption && debugPort !== '0') {\n        result = `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n      }\n    }\n\n    return result;\n  });\n}","map":{"version":3,"names":["EventEmitter","require","spawn","path","dirname","basename","fs","inherits","Command","exports","module","Option","flags","description","required","indexOf","optional","mandatory","negate","split","length","test","short","shift","long","prototype","name","replace","attributeName","camelcase","is","arg","CommanderError","Error","constructor","exitCode","code","message","captureStackTrace","commands","options","_execs","Set","_allowUnknownOption","_args","_name","_optionValues","_storeOptionsAsProperties","_passCommandToAction","_actionResults","_helpFlags","_helpDescription","_helpShortFlag","_helpLongFlag","command","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","args","cmd","executables","add","isDefault","defaultExecutable","_noHelp","noHelp","_exitCallback","_executableFile","executableFile","push","parseExpectedArgs","parent","arguments","addImplicitHelpCommand","self","forEach","argDetails","variadic","slice","exitOverride","fn","err","_exit","process","exit","action","listener","unknown","parsed","parseOptions","outputHelpIfRequested","_checkForMissingMandatoryOptions","unknownOption","concat","i","missingArgument","variadicArgNotLast","splice","expectedArgsCount","actionArgs","actionResult","apply","rootCommand","on","_alias","_optionEx","config","defaultValue","option","oname","RegExp","regex","val","def","m","exec","positiveLongFlag","optionFor","_getOptionValue","undefined","_setOptionValue","requiredOption","allowUnknownOption","storeOptionsAsProperties","value","console","error","passCommandToAction","key","parse","argv","rawArgs","normalized","normalize","result","parseArgs","help","subCommand","find","alias","unshift","has","executeSubCommand","parseAsync","Promise","all","isExplicitJS","pm","bin","extname","executableExt","baseDir","resolvedLink","realpathSync","localBin","join","exists","proc","platform","incrementNodeInspectorPort","execArgv","stdio","execPath","signals","signal","killed","kill","exitCallback","bind","wrappedError","nestedError","runningCommand","ret","lastOpt","index","opt","len","c","listeners","emit","filter","a","anOption","missingMandatoryOptionValue","literal","unknownOptions","optionMissingArgument","_versionOptionName","_version","flag","version","str","versionOption","substr","stdout","write","argsDescription","_description","_argsDescription","usage","map","humanReadableArgName","_usage","prepareCommands","largestCommandLength","reduce","max","Math","largestOptionLength","call","largestArgLength","padWidth","width","optionHelp","columns","descriptionWidth","fullDesc","JSON","stringify","pad","optionalWrap","commandHelp","helpInformation","wrap","cmdName","parentCmdNames","parentCmd","cmds","outputHelp","cb","passthru","cbOutput","Buffer","isBuffer","helpOption","splitFlags","word","toUpperCase","Array","indent","lines","match","line","trimRight","minWidth","nameOutput","file","statSync","isFile","e","debugOption","debugHost","debugPort","parseInt"],"sources":["C:/Users/gsess/node_modules/commander/index.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar fs = require('fs');\n\n/**\n * Inherit `Command` from `EventEmitter.prototype`.\n */\n\nrequire('util').inherits(Command, EventEmitter);\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\n\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = flags.indexOf('<') >= 0; // A value must be supplied when the option is specified.\n  this.optional = flags.indexOf('[') >= 0; // A value is optional when the option is specified.\n  this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n  this.negate = flags.indexOf('-no-') !== -1;\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.name = function() {\n  return this.long.replace(/^--/, '');\n};\n\n/**\n * Return option name, in a camelcase format that can be used\n * as a object attribute key.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.attributeName = function() {\n  return camelcase(this.name().replace(/^no-/, ''));\n};\n\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\nOption.prototype.is = function(arg) {\n  return this.short === arg || this.long === arg;\n};\n\n/**\n * CommanderError class\n * @class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {Number} exitCode suggested exit code which could be used with process.exit\n   * @param {String} code an id string representing the error\n   * @param {String} message human-readable description of the error\n   * @constructor\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n  }\n}\n\nexports.CommanderError = CommanderError;\n\n/**\n * Initialize a new `Command`.\n *\n * @param {String} [name]\n * @api public\n */\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = new Set();\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n  this._optionValues = {};\n  this._storeOptionsAsProperties = true; // backwards compatible by default\n  this._passCommandToAction = true; // backwards compatible by default\n  this._actionResults = [];\n\n  this._helpFlags = '-h, --help';\n  this._helpDescription = 'output usage information';\n  this._helpShortFlag = '-h';\n  this._helpLongFlag = '--help';\n}\n\n/**\n * Define a command.\n *\n * There are two styles of command: pay attention to where to put the description.\n *\n * Examples:\n *\n *      // Command implemented using action handler (description is supplied separately to `.command`)\n *      program\n *        .command('clone <source> [destination]')\n *        .description('clone a repository into a newly created directory')\n *        .action((source, destination) => {\n *          console.log('clone command called');\n *        });\n *\n *      // Command implemented using separate executable file (description is second parameter to `.command`)\n *      program\n *        .command('start <service>', 'start named service')\n *        .command('stop [service]', 'stop named service, or all if no name supplied');\n *\n * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n * @param {Object} [execOpts] - configuration options (for executable)\n * @return {Command} returns new command for action handler, or top-level command for executable command\n * @api public\n */\n\nCommand.prototype.command = function(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n  var desc = actionOptsOrExecDesc;\n  var opts = execOpts;\n  if (typeof desc === 'object' && desc !== null) {\n    opts = desc;\n    desc = null;\n  }\n  opts = opts || {};\n  var args = nameAndArgs.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs.add(cmd._name);\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n  cmd._noHelp = !!opts.noHelp;\n  cmd._helpFlags = this._helpFlags;\n  cmd._helpDescription = this._helpDescription;\n  cmd._helpShortFlag = this._helpShortFlag;\n  cmd._helpLongFlag = this._helpLongFlag;\n  cmd._exitCallback = this._exitCallback;\n  cmd._storeOptionsAsProperties = this._storeOptionsAsProperties;\n  cmd._passCommandToAction = this._passCommandToAction;\n\n  cmd._executableFile = opts.executableFile; // Custom name for executable file\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n\n  if (desc) return this;\n  return cmd;\n};\n\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\nCommand.prototype.arguments = function(desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\nCommand.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parseExpectedArgs = function(args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n\n/**\n * Register callback to use as replacement for calling process.exit.\n *\n * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.exitOverride = function(fn) {\n  if (fn) {\n    this._exitCallback = fn;\n  } else {\n    this._exitCallback = function(err) {\n      if (err.code !== 'commander.executeSubCommandAsync') {\n        throw err;\n      } else {\n        // Async callback from spawn events, not useful to throw.\n      }\n    };\n  }\n  return this;\n};\n\n/**\n * Call process.exit, and _exitCallback if defined.\n *\n * @param {Number} exitCode exit code for using with process.exit\n * @param {String} code an id string representing the error\n * @param {String} message human-readable description of the error\n * @return never\n * @api private\n */\n\nCommand.prototype._exit = function(exitCode, code, message) {\n  if (this._exitCallback) {\n    this._exitCallback(new CommanderError(exitCode, code, message));\n    // Expecting this line is not reached.\n  }\n  process.exit(exitCode);\n};\n\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfRequested(self, parsed.unknown);\n    self._checkForMissingMandatoryOptions();\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i) {\n      if (arg.required && args[i] == null) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    });\n\n    // The .action callback takes an extra parameter which is the command itself.\n    var expectedArgsCount = self._args.length;\n    var actionArgs = args.slice(0, expectedArgsCount);\n    if (self._passCommandToAction) {\n      actionArgs[expectedArgsCount] = self;\n    } else {\n      actionArgs[expectedArgsCount] = self.opts();\n    }\n    // Add the extra arguments so available too.\n    if (args.length > expectedArgsCount) {\n      actionArgs.push(args.slice(expectedArgsCount));\n    }\n\n    const actionResult = fn.apply(self, actionArgs);\n    // Remember result in case it is async. Assume parseAsync getting called on root.\n    let rootCommand = self;\n    while (rootCommand.parent) {\n      rootCommand = rootCommand.parent;\n    }\n    rootCommand._actionResults.push(actionResult);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on('command:' + name, listener);\n  if (this._alias) parent.on('command:' + this._alias, listener);\n  return this;\n};\n\n/**\n * Internal implementation shared by .option() and .requiredOption()\n *\n * @param {Object} config\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] - custom option processing function or default vaue\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api private\n */\n\nCommand.prototype._optionEx = function(config, flags, description, fn, defaultValue) {\n  var self = this,\n    option = new Option(flags, description),\n    oname = option.name(),\n    name = option.attributeName();\n  option.mandatory = !!config.mandatory;\n\n  // default as 3rd arg\n  if (typeof fn !== 'function') {\n    if (fn instanceof RegExp) {\n      // This is a bit simplistic (especially no error messages), and probably better handled by caller using custom option processing.\n      // No longer documented in README, but still present for backwards compatibility.\n      var regex = fn;\n      fn = function(val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n    } else {\n      defaultValue = fn;\n      fn = null;\n    }\n  }\n\n  // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value\n  if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {\n    // when --no-foo we make sure default is true, unless a --foo option is already defined\n    if (option.negate) {\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      defaultValue = self.optionFor(positiveLongFlag) ? self._getOptionValue(name) : true;\n    }\n    // preassign only if we have a default\n    if (defaultValue !== undefined) {\n      self._setOptionValue(name, defaultValue);\n      option.defaultValue = defaultValue;\n    }\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on('option:' + oname, function(val) {\n    // coercion\n    if (val !== null && fn) {\n      val = fn(val, self._getOptionValue(name) === undefined ? defaultValue : self._getOptionValue(name));\n    }\n\n    // unassigned or boolean value\n    if (typeof self._getOptionValue(name) === 'boolean' || typeof self._getOptionValue(name) === 'undefined') {\n      // if no value, negate false, and we have a default, then use it!\n      if (val == null) {\n        self._setOptionValue(name, option.negate\n          ? false\n          : defaultValue || true);\n      } else {\n        self._setOptionValue(name, val);\n      }\n    } else if (val !== null) {\n      // reassign\n      self._setOptionValue(name, option.negate ? false : val);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to undefined\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     program.pepper\n *     // => undefined\n *\n *     --pepper\n *     program.pepper\n *     // => true\n *\n *     // simple boolean defaulting to true (unless non-negated option is also defined)\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] - custom option processing function or default vaue\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.option = function(flags, description, fn, defaultValue) {\n  return this._optionEx({}, flags, description, fn, defaultValue);\n};\n\n/*\n * Add a required option which must have a value after parsing. This usually means\n * the option must be specified on the command line. (Otherwise the same as .option().)\n *\n * The `flags` string should contain both the short and long flags, separated by comma, a pipe or space.\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] - custom option processing function or default vaue\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.requiredOption = function(flags, description, fn, defaultValue) {\n  return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n};\n\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\nCommand.prototype.allowUnknownOption = function(arg) {\n  this._allowUnknownOption = arguments.length === 0 || arg;\n  return this;\n};\n\n/**\n  * Whether to store option values as properties on command object,\n  * or store separately (specify false). In both cases the option values can be accessed using .opts().\n  *\n  * @param {boolean} value\n  * @return {Command} Command for chaining\n  * @api public\n  */\n\nCommand.prototype.storeOptionsAsProperties = function(value) {\n  this._storeOptionsAsProperties = (value === undefined) || value;\n  if (this.options.length) {\n    // This is for programmer, not end user.\n    console.error('Commander usage error: call storeOptionsAsProperties before adding options');\n  }\n  return this;\n};\n\n/**\n  * Whether to pass command to action handler,\n  * or just the options (specify false).\n  *\n  * @param {boolean} value\n  * @return {Command} Command for chaining\n  * @api public\n  */\n\nCommand.prototype.passCommandToAction = function(value) {\n  this._passCommandToAction = (value === undefined) || value;\n  return this;\n};\n\n/**\n * Store option value\n *\n * @param {String} key\n * @param {Object} value\n * @api private\n */\n\nCommand.prototype._setOptionValue = function(key, value) {\n  if (this._storeOptionsAsProperties) {\n    this[key] = value;\n  } else {\n    this._optionValues[key] = value;\n  }\n};\n\n/**\n * Retrieve option value\n *\n * @param {String} key\n * @return {Object} value\n * @api private\n */\n\nCommand.prototype._getOptionValue = function(key) {\n  if (this._storeOptionsAsProperties) {\n    return this[key];\n  }\n  return this._optionValues[key];\n};\n\n/**\n * Parse `argv`, setting options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parse = function(argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // github-style sub-commands with no sub-command\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push(this._helpLongFlag);\n  }\n\n  // process argv\n  var normalized = this.normalize(argv.slice(2));\n  var parsed = this.parseOptions(normalized);\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  if (args[0] === 'help' && args.length === 1) this.help();\n\n  // Note for future: we could return early if we found an action handler in parseArgs, as none of following code needed?\n\n  // <cmd> --help\n  if (args[0] === 'help') {\n    args[0] = args[1];\n    args[1] = this._helpLongFlag;\n  } else {\n    // If calling through to executable subcommand we could check for help flags before failing,\n    // but a somewhat unlikely case since program options not passed to executable subcommands.\n    // Wait for reports to see if check needed and what usage pattern is.\n    this._checkForMissingMandatoryOptions();\n  }\n\n  // executable sub-commands\n  // (Debugging note for future: args[0] is not right if an action has been called)\n  var name = result.args[0];\n  var subCommand = null;\n\n  // Look for subcommand\n  if (name) {\n    subCommand = this.commands.find(function(command) {\n      return command._name === name;\n    });\n  }\n\n  // Look for alias\n  if (!subCommand && name) {\n    subCommand = this.commands.find(function(command) {\n      return command.alias() === name;\n    });\n    if (subCommand) {\n      name = subCommand._name;\n      args[0] = name;\n    }\n  }\n\n  // Look for default subcommand\n  if (!subCommand && this.defaultExecutable) {\n    name = this.defaultExecutable;\n    args.unshift(name);\n    subCommand = this.commands.find(function(command) {\n      return command._name === name;\n    });\n  }\n\n  if (this._execs.has(name)) {\n    return this.executeSubCommand(argv, args, parsed.unknown, subCommand ? subCommand._executableFile : undefined);\n  }\n\n  return result;\n};\n\n/**\n * Parse `argv`, setting options and invoking commands when defined.\n *\n * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n *\n * @param {Array} argv\n * @return {Promise}\n * @api public\n */\nCommand.prototype.parseAsync = function(argv) {\n  this.parse(argv);\n  return Promise.all(this._actionResults);\n};\n\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @param {String} executableFile\n * @api private\n */\n\nCommand.prototype.executeSubCommand = function(argv, args, unknown, executableFile) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n\n  var isExplicitJS = false; // Whether to use node to launch \"executable\"\n\n  // executable\n  var pm = argv[1];\n  // name of the subcommand, like `pm-install`\n  var bin = basename(pm, path.extname(pm)) + '-' + args[0];\n  if (executableFile != null) {\n    bin = executableFile;\n    // Check for same extensions as we scan for below so get consistent launch behaviour.\n    var executableExt = path.extname(executableFile);\n    isExplicitJS = executableExt === '.js' || executableExt === '.ts' || executableExt === '.mjs';\n  }\n\n  // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n  var baseDir;\n\n  var resolvedLink = fs.realpathSync(pm);\n\n  baseDir = dirname(resolvedLink);\n\n  // prefer local `./<bin>` to bin in the $PATH\n  var localBin = path.join(baseDir, bin);\n\n  // whether bin file is a js script with explicit `.js` or `.ts` extension\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin + '.ts')) {\n    bin = localBin + '.ts';\n    isExplicitJS = true;\n  } else if (exists(localBin + '.mjs')) {\n    bin = localBin + '.mjs';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n\n  var proc;\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n      proc = spawn(process.argv[0], args, { stdio: 'inherit' });\n    } else {\n      proc = spawn(bin, args, { stdio: 'inherit' });\n    }\n  } else {\n    args.unshift(bin);\n    // add executable arguments to spawn\n    args = incrementNodeInspectorPort(process.execArgv).concat(args);\n    proc = spawn(process.execPath, args, { stdio: 'inherit' });\n  }\n\n  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n  signals.forEach(function(signal) {\n    process.on(signal, function() {\n      if (proc.killed === false && proc.exitCode === null) {\n        proc.kill(signal);\n      }\n    });\n  });\n\n  // By default terminate process when spawned process terminates.\n  // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n  const exitCallback = this._exitCallback;\n  if (!exitCallback) {\n    proc.on('close', process.exit.bind(process));\n  } else {\n    proc.on('close', () => {\n      exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n    });\n  }\n  proc.on('error', function(err) {\n    if (err.code === 'ENOENT') {\n      console.error('error: %s(1) does not exist, try --help', bin);\n    } else if (err.code === 'EACCES') {\n      console.error('error: %s(1) not executable. try chmod or run with root', bin);\n    }\n    if (!exitCallback) {\n      process.exit(1);\n    } else {\n      const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n      wrappedError.nestedError = err;\n      exitCallback(wrappedError);\n    }\n  });\n\n  // Store the reference to the child process\n  this.runningCommand = proc;\n};\n\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.normalize = function(args) {\n  var ret = [],\n    arg,\n    lastOpt,\n    index,\n    short,\n    opt;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i - 1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n      short = arg.slice(0, 2);\n      opt = this.optionFor(short);\n      if (opt && (opt.required || opt.optional)) {\n        ret.push(short);\n        ret.push(arg.slice(2));\n      } else {\n        arg.slice(1).split('').forEach(function(c) {\n          ret.push('-' + c);\n        });\n      }\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners('command:' + name).length) {\n      this.emit('command:' + args.shift(), args, unknown);\n    } else {\n      this.emit('command:*', args, unknown);\n    }\n  } else {\n    outputHelpIfRequested(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0 && !this.defaultExecutable) {\n      this.unknownOption(unknown[0]);\n    }\n    if (this.commands.length === 0 &&\n        this._args.filter(function(a) { return a.required; }).length === 0) {\n      this.emit('command:*');\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\nCommand.prototype.optionFor = function(arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n\n/**\n * Display an error message if a mandatory option does not have a value.\n *\n * @api private\n */\n\nCommand.prototype._checkForMissingMandatoryOptions = function() {\n  // Walk up hierarchy so can call from action handler after checking for displaying help.\n  for (var cmd = this; cmd; cmd = cmd.parent) {\n    cmd.options.forEach((anOption) => {\n      if (anOption.mandatory && (cmd._getOptionValue(anOption.attributeName()) === undefined)) {\n        cmd.missingMandatoryOptionValue(anOption);\n      }\n    });\n  }\n};\n\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {{args: Array, unknown: Array}}\n * @api public\n */\n\nCommand.prototype.parseOptions = function(argv) {\n  var args = [],\n    len = argv.length,\n    literal,\n    option,\n    arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    if (arg === '--') {\n      literal = true;\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (arg == null) return this.optionMissingArgument(option);\n        this.emit('option:' + option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i + 1];\n        if (arg == null || (arg[0] === '-' && arg !== '-')) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit('option:' + option.name(), arg);\n      // flag\n      } else {\n        this.emit('option:' + option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && arg[0] === '-') {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if ((i + 1) < argv.length && (argv[i + 1][0] !== '-' || argv[i + 1] === '-')) {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};\n\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\nCommand.prototype.opts = function() {\n  if (this._storeOptionsAsProperties) {\n    // Preserve original behaviour so backwards compatible when still using properties\n    var result = {},\n      len = this.options.length;\n\n    for (var i = 0; i < len; i++) {\n      var key = this.options[i].attributeName();\n      result[key] = key === this._versionOptionName ? this._version : this[key];\n    }\n    return result;\n  }\n\n  return this._optionValues;\n};\n\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.missingArgument = function(name) {\n  const message = `error: missing required argument '${name}'`;\n  console.error(message);\n  this._exit(1, 'commander.missingArgument', message);\n};\n\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {Option} option\n * @param {String} [flag]\n * @api private\n */\n\nCommand.prototype.optionMissingArgument = function(option, flag) {\n  let message;\n  if (flag) {\n    message = `error: option '${option.flags}' argument missing, got '${flag}'`;\n  } else {\n    message = `error: option '${option.flags}' argument missing`;\n  }\n  console.error(message);\n  this._exit(1, 'commander.optionMissingArgument', message);\n};\n\n/**\n * `Option` does not have a value, and is a mandatory option.\n *\n * @param {Option} option\n * @api private\n */\n\nCommand.prototype.missingMandatoryOptionValue = function(option) {\n  const message = `error: required option '${option.flags}' not specified`;\n  console.error(message);\n  this._exit(1, 'commander.missingMandatoryOptionValue', message);\n};\n\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.unknownOption = function(flag) {\n  if (this._allowUnknownOption) return;\n  const message = `error: unknown option '${flag}'`;\n  console.error(message);\n  this._exit(1, 'commander.unknownOption', message);\n};\n\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.variadicArgNotLast = function(name) {\n  const message = `error: variadic arguments must be last '${name}'`;\n  console.error(message);\n  this._exit(1, 'commander.variadicArgNotLast', message);\n};\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * You can optionally supply the  flags and description to override the defaults.\n *\n * @param {String} str\n * @param {String} [flags]\n * @param {String} [description]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.version = function(str, flags, description) {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  description = description || 'output the version number';\n  var versionOption = new Option(flags, description);\n  this._versionOptionName = versionOption.long.substr(2) || 'version';\n  this.options.push(versionOption);\n  var self = this;\n  this.on('option:' + this._versionOptionName, function() {\n    process.stdout.write(str + '\\n');\n    self._exit(0, 'commander.version', str);\n  });\n  return this;\n};\n\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @param {Object} [argsDescription]\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.description = function(str, argsDescription) {\n  if (arguments.length === 0) return this._description;\n  this._description = str;\n  this._argsDescription = argsDescription;\n  return this;\n};\n\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.alias = function(alias) {\n  var command = this;\n  if (this.commands.length !== 0) {\n    command = this.commands[this.commands.length - 1];\n  }\n\n  if (arguments.length === 0) return command._alias;\n\n  if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n  command._alias = alias;\n  return this;\n};\n\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} [str]\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.usage = function(str) {\n  var args = this._args.map(function(arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]' +\n    (this.commands.length ? ' [command]' : '') +\n    (this._args.length ? ' ' + args.join(' ') : '');\n\n  if (arguments.length === 0) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};\n\n/**\n * Get or set the name of the command\n *\n * @param {String} [str]\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.name = function(str) {\n  if (arguments.length === 0) return this._name;\n  this._name = str;\n  return this;\n};\n\n/**\n * Return prepared commands.\n *\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.prepareCommands = function() {\n  return this.commands.filter(function(cmd) {\n    return !cmd._noHelp;\n  }).map(function(cmd) {\n    var args = cmd._args.map(function(arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [\n      cmd._name +\n        (cmd._alias ? '|' + cmd._alias : '') +\n        (cmd.options.length ? ' [options]' : '') +\n        (args ? ' ' + args : ''),\n      cmd._description\n    ];\n  });\n};\n\n/**\n * Return the largest command length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestCommandLength = function() {\n  var commands = this.prepareCommands();\n  return commands.reduce(function(max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n};\n\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestOptionLength = function() {\n  var options = [].slice.call(this.options);\n  options.push({\n    flags: this._helpFlags\n  });\n\n  return options.reduce(function(max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n\n/**\n * Return the largest arg length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestArgLength = function() {\n  return this._args.reduce(function(max, arg) {\n    return Math.max(max, arg.name.length);\n  }, 0);\n};\n\n/**\n * Return the pad width.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.padWidth = function() {\n  var width = this.largestOptionLength();\n  if (this._argsDescription && this._args.length) {\n    if (this.largestArgLength() > width) {\n      width = this.largestArgLength();\n    }\n  }\n\n  if (this.commands && this.commands.length) {\n    if (this.largestCommandLength() > width) {\n      width = this.largestCommandLength();\n    }\n  }\n\n  return width;\n};\n\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.optionHelp = function() {\n  var width = this.padWidth();\n\n  var columns = process.stdout.columns || 80;\n  var descriptionWidth = columns - width - 4;\n\n  // Append the help information\n  return this.options.map(function(option) {\n    const fullDesc = option.description +\n      ((!option.negate && option.defaultValue !== undefined) ? ' (default: ' + JSON.stringify(option.defaultValue) + ')' : '');\n    return pad(option.flags, width) + '  ' + optionalWrap(fullDesc, descriptionWidth, width + 2);\n  }).concat([pad(this._helpFlags, width) + '  ' + optionalWrap(this._helpDescription, descriptionWidth, width + 2)])\n    .join('\\n');\n};\n\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.commandHelp = function() {\n  if (!this.commands.length) return '';\n\n  var commands = this.prepareCommands();\n  var width = this.padWidth();\n\n  var columns = process.stdout.columns || 80;\n  var descriptionWidth = columns - width - 4;\n\n  return [\n    'Commands:',\n    commands.map(function(cmd) {\n      var desc = cmd[1] ? '  ' + cmd[1] : '';\n      return (desc ? pad(cmd[0], width) : cmd[0]) + optionalWrap(desc, descriptionWidth, width + 2);\n    }).join('\\n').replace(/^/gm, '  '),\n    ''\n  ].join('\\n');\n};\n\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.helpInformation = function() {\n  var desc = [];\n  if (this._description) {\n    desc = [\n      this._description,\n      ''\n    ];\n\n    var argsDescription = this._argsDescription;\n    if (argsDescription && this._args.length) {\n      var width = this.padWidth();\n      var columns = process.stdout.columns || 80;\n      var descriptionWidth = columns - width - 5;\n      desc.push('Arguments:');\n      desc.push('');\n      this._args.forEach(function(arg) {\n        desc.push('  ' + pad(arg.name, width) + '  ' + wrap(argsDescription[arg.name], descriptionWidth, width + 4));\n      });\n      desc.push('');\n    }\n  }\n\n  var cmdName = this._name;\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n  var parentCmdNames = '';\n  for (var parentCmd = this.parent; parentCmd; parentCmd = parentCmd.parent) {\n    parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n  }\n  var usage = [\n    'Usage: ' + parentCmdNames + cmdName + ' ' + this.usage(),\n    ''\n  ];\n\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n\n  var options = [\n    'Options:',\n    '' + this.optionHelp().replace(/^/gm, '  '),\n    ''\n  ];\n\n  return usage\n    .concat(desc)\n    .concat(options)\n    .concat(cmds)\n    .join('\\n');\n};\n\n/**\n * Output help information for this command.\n *\n * When listener(s) are available for the helpLongFlag\n * those callbacks are invoked.\n *\n * @api public\n */\n\nCommand.prototype.outputHelp = function(cb) {\n  if (!cb) {\n    cb = function(passthru) {\n      return passthru;\n    };\n  }\n  const cbOutput = cb(this.helpInformation());\n  if (typeof cbOutput !== 'string' && !Buffer.isBuffer(cbOutput)) {\n    throw new Error('outputHelp callback must return a string or a Buffer');\n  }\n  process.stdout.write(cbOutput);\n  this.emit(this._helpLongFlag);\n};\n\n/**\n * You can pass in flags and a description to override the help\n * flags and help description for your command.\n *\n * @param {String} [flags]\n * @param {String} [description]\n * @return {Command}\n * @api public\n */\n\nCommand.prototype.helpOption = function(flags, description) {\n  this._helpFlags = flags || this._helpFlags;\n  this._helpDescription = description || this._helpDescription;\n\n  var splitFlags = this._helpFlags.split(/[ ,|]+/);\n\n  if (splitFlags.length > 1) this._helpShortFlag = splitFlags.shift();\n\n  this._helpLongFlag = splitFlags.shift();\n\n  return this;\n};\n\n/**\n * Output help information and exit.\n *\n * @param {Function} [cb]\n * @api public\n */\n\nCommand.prototype.help = function(cb) {\n  this.outputHelp(cb);\n  // exitCode: preserving original behaviour which was calling process.exit()\n  // message: do not have all displayed text available so only passing placeholder.\n  this._exit(process.exitCode || 0, 'commander.help', '(outputHelp)');\n};\n\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function(str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Wraps the given string with line breaks at the specified width while breaking\n * words and indenting every but the first line on the left.\n *\n * @param {String} str\n * @param {Number} width\n * @param {Number} indent\n * @return {String}\n * @api private\n */\nfunction wrap(str, width, indent) {\n  var regex = new RegExp('.{1,' + (width - 1) + '}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)', 'g');\n  var lines = str.match(regex) || [];\n  return lines.map(function(line, i) {\n    if (line.slice(-1) === '\\n') {\n      line = line.slice(0, line.length - 1);\n    }\n    return ((i > 0 && indent) ? Array(indent + 1).join(' ') : '') + line.trimRight();\n  }).join('\\n');\n}\n\n/**\n * Optionally wrap the given str to a max width of width characters per line\n * while indenting with indent spaces. Do not wrap if insufficient width or\n * string is manually formatted.\n *\n * @param {String} str\n * @param {Number} width\n * @param {Number} indent\n * @return {String}\n * @api private\n */\nfunction optionalWrap(str, width, indent) {\n  // Detect manually wrapped and indented strings by searching for line breaks\n  // followed by multiple spaces/tabs.\n  if (str.match(/[\\n]\\s+/)) return str;\n  // Do not wrap to narrow columns (or can end up with a word per line).\n  const minWidth = 40;\n  if (width < minWidth) return str;\n\n  return wrap(str, width, indent);\n}\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} options - array of options to search for -h or --help\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, options) {\n  options = options || [];\n\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] === cmd._helpLongFlag || options[i] === cmd._helpShortFlag) {\n      cmd.outputHelp();\n      // (Do not have all displayed text available so only passing placeholder.)\n      cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\n// for versions before node v0.8 when there weren't `fs.existsSync`\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    var result = arg;\n    if (arg.indexOf('--inspect') === 0) {\n      var debugOption;\n      var debugHost = '127.0.0.1';\n      var debugPort = '9229';\n      var match;\n      if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n        // e.g. --inspect\n        debugOption = match[1];\n      } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n        debugOption = match[1];\n        if (/^\\d+$/.test(match[3])) {\n          // e.g. --inspect=1234\n          debugPort = match[3];\n        } else {\n          // e.g. --inspect=localhost\n          debugHost = match[3];\n        }\n      } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n        // e.g. --inspect=localhost:1234\n        debugOption = match[1];\n        debugHost = match[3];\n        debugPort = match[4];\n      }\n\n      if (debugOption && debugPort !== '0') {\n        result = `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n      }\n    }\n    return result;\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}