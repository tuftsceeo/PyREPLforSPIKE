{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gsess\\\\Documents\\\\React\\\\repl\\\\src\\\\components\\\\Serial\\\\Serial.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SerialButton from \"./SerialButton\";\nimport APIButton from \"./APIButton\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport PlayCircleIcon from '@mui/icons-material/PlayCircle';\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\nimport Fab from '@mui/material/Fab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VENDOR_ID = 0x0694; // LEGO SPIKE Prime Hub\n\nlet port = null;\nconst CONTROL_C = '\\x03'; // CTRL-C character \n\nconst CONTROL_D = '\\x04'; // CTRL-D character\n\nconst ENTER = '\\r\\n'; // NEWLINE character\n\nconst docsLink = \"https://tufts-cr-for-lego.codingrooms.com/documentation/spike_prime_python_knowledge_base#top\";\nlet isWriteInit = false;\nlet textEncoder;\nlet writableStreamClosed;\nlet writer;\n\nfunction Serial(props) {\n  _s();\n\n  //let [write, setWrite] = useState(null);\n\n  /*\r\n      InitWebSerial\r\n      - Initializes a Web Serial Port and returns the initialized port\r\n      - Returns the port if successful, null otherwise\r\n  */\n  async function initWebSerial() {\n    port = await navigator.serial.getPorts();\n    port = await navigator.serial.requestPort(); // wait for the port to open.\n\n    try {\n      await port.open({\n        baudRate: 115200\n      });\n    } catch (er) {\n      console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er); //await port.close();\n    }\n\n    if (port.readable) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const [readSerialPort, setReadSerialPort] = useState(true); // Reads Data from the SPIKE Prime (Uint8Array Format)\n\n  async function readPort() {\n    // eslint-disable-next-line no-undef\n    let decoder = new TextDecoderStream();\n    let inputDone = port.readable.pipeTo(decoder.writable);\n    const inputStream = decoder.readable;\n    const reader = inputStream.getReader();\n\n    while (port.readable && readSerialPort) {\n      //const reader = port.readable.getReader();\n      try {\n        while (true) {\n          const {\n            value,\n            done\n          } = await reader.read();\n\n          if (done) {\n            // |reader| has been canceled.\n            break;\n          }\n\n          props.exportConsole(value);\n          console.log(value);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        reader.releaseLock();\n      }\n    }\n  }\n\n  function initWriteStream() {\n    // eslint-disable-next-line no-undef\n    textEncoder = new TextEncoderStream();\n    writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\n    writer = textEncoder.writable.getWriter();\n  } // Writes a string (or array of strings) to the SPIKE terminal\n\n\n  async function writeToPort(lines) {\n    console.log(textEncoder);\n\n    if (!isWriteInit) {\n      try {\n        initWriteStream();\n        isWriteInit = true;\n      } catch (e) {\n        console.error(\"Unable to initialize stream\");\n      }\n    }\n\n    if (writer == undefined) {\n      console.error(\"Error: Writer Not Defined\");\n    } else {\n      await writer.write(ENTER);\n      if (typeof lines === \"string\") await writer.write(lines); // Writes code one line at a time\n      else if (typeof lines === \"object\") {\n        lines.forEach(element => {\n          //element += ENTER\n          writer.write(element);\n        });\n      }\n      writer.write(ENTER);\n    }\n  } // Writes and reads code to/from serial port\n\n\n  async function startWebSerial() {\n    if (await initWebSerial()) {\n      await writeToPort([CONTROL_C]);\n      await writeToPort([\"from spike import PrimeHub, LightMatrix, Button, StatusLight, ForceSensor, MotionSensor, Speaker, ColorSensor, App, DistanceSensor, Motor, MotorPair\"]);\n      setTimeout(async () => {\n        readPort();\n      }, 250);\n    }\n  }\n\n  function closePort() {\n    port.close();\n  } // Serial Port UI Component Hooks\n\n\n  const defaultDirections = \"SPIKE Not Connected, Connect Here: \";\n  const activeSerialDirections = \"\";\n  const [connectText, setConnectText] = useState(defaultDirections);\n  const [serialOn, setSerialOn] = useState(false); // Changes functionality of serial port button once serial port is connected\n\n  function serialButtonConnected() {\n    let checkConnectionInterval;\n    setTimeout(() => {\n      checkConnectionInterval = setInterval(() => {\n        if (port.readable) {\n          setSerialOn(true);\n          setConnectText(activeSerialDirections);\n        } else if (port === null || port === undefined || !port.readable) {\n          //clearInterval(checkConnectionInterval);\n          setSerialOn(false);\n          setConnectText(defaultDirections);\n        }\n      }, 1000);\n    }, 500);\n  } // Attempts a WebSerial Connection (associated with button press)\n\n\n  function connectToSPIKE() {\n    startWebSerial();\n    serialButtonConnected();\n  }\n\n  function strToASCII(s) {\n    let charCodeArr = [];\n\n    for (let i = 0; i < s.length; i++) {\n      let code = s.charCodeAt(i);\n      charCodeArr.push(code);\n    }\n\n    return charCodeArr;\n  }\n\n  function runCurrentCode() {\n    // Adds appropriate spaces at end of code to\n    // make sure the Python interpreter knows to run\n    // the code.\n    let currentCode = props.getCurrentCode();\n    let codeArray = currentCode.split(\"\\n\");\n    let numLastLineTabs = codeArray[codeArray.length - 1].split(\"\\t\");\n\n    for (let i = 0; i < numLastLineTabs.length - 1; i++) {\n      currentCode += \"\\n\";\n    }\n\n    writeToPort([...codeArray]);\n  } // When CRTL + ENTER is pressed, code is run\n  // https://stackoverflow.com/questions/37440408/how-to-detect-esc-key-press-in-react-and-how-to-handle-it\n\n\n  useEffect(() => {\n    const handleEsc = event => {\n      if (event.keyCode === 13 && event.ctrlKey) runCurrentCode();\n    };\n\n    window.addEventListener('keydown', handleEsc);\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(SerialButton, {\n      on: serialOn,\n      offColor: \"error\",\n      onColor: \"success\",\n      connectText: connectText,\n      onClick: () => {\n        connectToSPIKE();\n      },\n      restartClick: closePort,\n      getCurrentCode: props.getCurrentCode,\n      runCurrentCode: writeToPort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: !serialOn ? \"hidden\" : \"mx-4\",\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Restart SPIKE\",\n        placement: \"top\",\n        children: /*#__PURE__*/_jsxDEV(Fab, {\n          onClick: async () => {\n            await writeToPort(CONTROL_D);\n            await writeToPort(CONTROL_C);\n          },\n          color: \"warning\",\n          \"aria-label\": \"add\",\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(RestartAltIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: !serialOn ? \"hidden\" : \"mx-4\",\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Run Current File\",\n        placement: \"top\",\n        children: /*#__PURE__*/_jsxDEV(Fab, {\n          onClick: runCurrentCode,\n          color: \"info\",\n          \"aria-label\": \"add\",\n          size: \"small\",\n          children: /*#__PURE__*/_jsxDEV(PlayCircleIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(APIButton, {\n      link: docsLink,\n      on: serialOn,\n      color: \"inherit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Serial, \"MViCXk4NUnbdmrnz1dobx/aPktE=\");\n\n_c = Serial;\nexport default Serial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Serial\");","map":{"version":3,"names":["React","useState","useEffect","SerialButton","APIButton","Tooltip","PlayCircleIcon","RestartAltIcon","Fab","VENDOR_ID","port","CONTROL_C","CONTROL_D","ENTER","docsLink","isWriteInit","textEncoder","writableStreamClosed","writer","Serial","props","initWebSerial","navigator","serial","getPorts","requestPort","open","baudRate","er","console","log","readable","readSerialPort","setReadSerialPort","readPort","decoder","TextDecoderStream","inputDone","pipeTo","writable","inputStream","reader","getReader","value","done","read","exportConsole","error","releaseLock","initWriteStream","TextEncoderStream","getWriter","writeToPort","lines","e","undefined","write","forEach","element","startWebSerial","setTimeout","closePort","close","defaultDirections","activeSerialDirections","connectText","setConnectText","serialOn","setSerialOn","serialButtonConnected","checkConnectionInterval","setInterval","connectToSPIKE","strToASCII","s","charCodeArr","i","length","code","charCodeAt","push","runCurrentCode","currentCode","getCurrentCode","codeArray","split","numLastLineTabs","handleEsc","event","keyCode","ctrlKey","window","addEventListener","removeEventListener"],"sources":["C:/Users/gsess/Documents/React/repl/src/components/Serial/Serial.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport SerialButton from \"./SerialButton\";\r\nimport APIButton from \"./APIButton\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport PlayCircleIcon from '@mui/icons-material/PlayCircle';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport Fab from '@mui/material/Fab';\r\n\r\n\r\nconst VENDOR_ID = 0x0694; // LEGO SPIKE Prime Hub\r\n\r\nlet port = null;\r\n\r\nconst CONTROL_C = '\\x03'; // CTRL-C character \r\nconst CONTROL_D = '\\x04'; // CTRL-D character\r\nconst ENTER = '\\r\\n' // NEWLINE character\r\n\r\nconst docsLink = \"https://tufts-cr-for-lego.codingrooms.com/documentation/spike_prime_python_knowledge_base#top\";\r\n\r\nlet isWriteInit = false;\r\nlet textEncoder;\r\nlet writableStreamClosed;\r\n\r\nlet writer;\r\n\r\n\r\n\r\n\r\nfunction Serial(props) {\r\n\r\n    //let [write, setWrite] = useState(null);\r\n\r\n    /*\r\n        InitWebSerial\r\n        - Initializes a Web Serial Port and returns the initialized port\r\n        - Returns the port if successful, null otherwise\r\n    */\r\n    async function initWebSerial() {\r\n        port = await navigator.serial.getPorts();\r\n\r\n        port = await navigator.serial.requestPort(\r\n            \r\n        );\r\n\r\n        // wait for the port to open.\r\n        try {\r\n            await port.open({ baudRate: 115200 });\r\n        }\r\n        catch (er) {\r\n            console.log(\"%cTuftsCEEO \", \"color: #3ba336;\", er);\r\n            //await port.close();\r\n        }\r\n\r\n        if (port.readable) {\r\n            return true;\r\n            \r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const [readSerialPort, setReadSerialPort] = useState(true);\r\n\r\n    // Reads Data from the SPIKE Prime (Uint8Array Format)\r\n    async function readPort() {\r\n        // eslint-disable-next-line no-undef\r\n        let decoder = new TextDecoderStream();\r\n        let inputDone = port.readable.pipeTo(decoder.writable);\r\n        const inputStream = decoder.readable;\r\n\r\n        const reader = inputStream.getReader();\r\n        while (port.readable && readSerialPort) {\r\n            //const reader = port.readable.getReader();\r\n            try {\r\n                while (true) {\r\n                const { value, done } = await reader.read();\r\n                if (done) {\r\n                    // |reader| has been canceled.\r\n                    break;\r\n                }\r\n                props.exportConsole(value);\r\n                console.log(value)\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            } finally {\r\n                reader.releaseLock();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function initWriteStream() {\r\n        // eslint-disable-next-line no-undef\r\n        textEncoder = new TextEncoderStream();\r\n        writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\r\n        writer = textEncoder.writable.getWriter();\r\n    }\r\n\r\n    // Writes a string (or array of strings) to the SPIKE terminal\r\n    async function writeToPort(lines) {\r\n\r\n        console.log(textEncoder);\r\n        if (!isWriteInit) {\r\n            try {\r\n                initWriteStream()\r\n                isWriteInit = true;\r\n            }\r\n            catch (e) {\r\n                console.error(\"Unable to initialize stream\")\r\n            }\r\n\r\n        }\r\n\r\n        if (writer == undefined) {\r\n            console.error(\"Error: Writer Not Defined\");\r\n        }\r\n        else {\r\n            await writer.write(ENTER)\r\n\r\n            if (typeof(lines) === \"string\")\r\n                await writer.write(lines);\r\n            // Writes code one line at a time\r\n            else if(typeof(lines) === \"object\") {\r\n                lines.forEach( (element) => {\r\n                    //element += ENTER\r\n                    writer.write(element)\r\n                });\r\n            }\r\n            writer.write(ENTER)\r\n\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n\r\n    // Writes and reads code to/from serial port\r\n    async function startWebSerial() {\r\n        if (await initWebSerial()) {\r\n            await writeToPort([CONTROL_C]);\r\n            await writeToPort([\"from spike import PrimeHub, LightMatrix, Button, StatusLight, ForceSensor, MotionSensor, Speaker, ColorSensor, App, DistanceSensor, Motor, MotorPair\"])\r\n\r\n            setTimeout(async() => {\r\n                readPort()\r\n                \r\n            }, 250);\r\n\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    function closePort() {\r\n        port.close()\r\n    }\r\n    \r\n    // Serial Port UI Component Hooks\r\n    const defaultDirections = \"SPIKE Not Connected, Connect Here: \";\r\n    const activeSerialDirections = \"\"\r\n    const [connectText, setConnectText] = useState(defaultDirections);\r\n    const [serialOn, setSerialOn] = useState(false);\r\n   \r\n\r\n    // Changes functionality of serial port button once serial port is connected\r\n    function serialButtonConnected() {\r\n        let checkConnectionInterval;\r\n        setTimeout(() => {\r\n            checkConnectionInterval = setInterval(() => {\r\n                if (port.readable) {\r\n                    setSerialOn(true);\r\n                    setConnectText(activeSerialDirections);\r\n                }\r\n                else if (port === null || port === undefined ||  !port.readable) {\r\n                    //clearInterval(checkConnectionInterval);\r\n                    setSerialOn(false);\r\n                    setConnectText(defaultDirections)\r\n\r\n                }\r\n                \r\n            }, 1000);\r\n        }, 500);\r\n        \r\n    }\r\n\r\n    // Attempts a WebSerial Connection (associated with button press)\r\n    function connectToSPIKE() {\r\n        startWebSerial(); \r\n        serialButtonConnected();\r\n    }\r\n\r\n    function strToASCII(s){\r\n        let charCodeArr = [];\r\n        \r\n        for(let i = 0; i < s.length; i++){\r\n            let code = s.charCodeAt(i);\r\n            charCodeArr.push(code);\r\n        }\r\n        \r\n        return charCodeArr;\r\n    }\r\n\r\n    function runCurrentCode() {\r\n\r\n        // Adds appropriate spaces at end of code to\r\n        // make sure the Python interpreter knows to run\r\n        // the code.\r\n        let currentCode = props.getCurrentCode();\r\n        let codeArray = currentCode.split(\"\\n\");\r\n        let numLastLineTabs = codeArray[codeArray.length - 1].split(\"\\t\");\r\n        for (let i = 0; i < numLastLineTabs.length - 1; i++) {\r\n            currentCode += \"\\n\";\r\n        }\r\n\r\n        writeToPort([...codeArray]);\r\n    }\r\n\r\n    // When CRTL + ENTER is pressed, code is run\r\n    // https://stackoverflow.com/questions/37440408/how-to-detect-esc-key-press-in-react-and-how-to-handle-it\r\n    \r\n    useEffect(() => {\r\n        const handleEsc = (event) => {\r\n            if (event.keyCode === 13 && event.ctrlKey) \r\n                runCurrentCode();\r\n        };\r\n        window.addEventListener('keydown', handleEsc);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleEsc);\r\n        };\r\n    }, []);\r\n    \r\n\r\n    return (\r\n        <div className=\"flex justify-center\">\r\n            \r\n            <SerialButton \r\n                on={serialOn} \r\n                offColor=\"error\"\r\n                onColor=\"success\" \r\n                connectText={connectText} \r\n                \r\n                onClick={() => {\r\n                    connectToSPIKE();\r\n                }} \r\n                restartClick={closePort} \r\n                getCurrentCode={props.getCurrentCode}\r\n                runCurrentCode={writeToPort}\r\n            />\r\n\r\n            <div className={!serialOn ? \"hidden\" : \"mx-4\"}>\r\n                <Tooltip title=\"Restart SPIKE\" placement=\"top\">\r\n                    <Fab \r\n                        onClick={async () => {\r\n                            await writeToPort(CONTROL_D);\r\n                            await writeToPort(CONTROL_C);\r\n                        }} \r\n                        color=\"warning\" \r\n                        aria-label=\"add\" \r\n                        size=\"small\">\r\n\r\n                        <RestartAltIcon />\r\n                    </Fab>\r\n                </Tooltip>\r\n            </div>\r\n\r\n            {/* RUN BUTTON Displayed when SPIKE IS connected */}\r\n            <div className={!serialOn ? \"hidden\" : \"mx-4\"}>\r\n                <Tooltip title=\"Run Current File\" placement=\"top\">\r\n                    <Fab \r\n                        onClick={runCurrentCode} \r\n                        color=\"info\" \r\n                        aria-label=\"add\" \r\n                        size=\"small\">\r\n\r\n                        <PlayCircleIcon />\r\n                    </Fab>\r\n                </Tooltip>\r\n            </div>\r\n\r\n            <APIButton link={docsLink} on={serialOn} color={\"inherit\"} />\r\n\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Serial;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}